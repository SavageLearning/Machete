<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="city" xml:space="preserve">
    <value>Ciudad</value>
  </data>
  <data name="cityrequired" xml:space="preserve">
    <value>Una ciudad es obligatoria</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>Descripción de los trabajos a realizar</value>
  </data>
  <data name="contactName" xml:space="preserve">
    <value>Nombre del contacto en el lugar de trabajo</value>
  </data>
  <data name="contactNamerequired" xml:space="preserve">
    <value>Un nombre de contacto es obligatorio</value>
  </data>
  <data name="englishRequired" xml:space="preserve">
    <value>Inglés es necesario para al menos un trabajador?</value>
  </data>
  <data name="englishRequiredNote" xml:space="preserve">
    <value>Nota sobre requisito de Inglés</value>
  </data>
  <data name="lunchSupplied" xml:space="preserve">
    <value>es el almuerzo proporcionado?</value>
  </data>
  <data name="notes" xml:space="preserve">
    <value>Notas del orden</value>
  </data>
  <data name="permanentPlacement" xml:space="preserve">
    <value>Esta es una posición permanente?</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>Telefono</value>
  </data>
  <data name="phonerequired" xml:space="preserve">
    <value>Número de teléfono es obligatorio</value>
  </data>
  <data name="state" xml:space="preserve">
    <value>Estado</value>
  </data>
  <data name="staterequired" xml:space="preserve">
    <value>Un estado es obligatorio</value>
  </data>
  <data name="status" xml:space="preserve">
    <value>Estado de la orden</value>
  </data>
  <data name="statusrequired" xml:space="preserve">
    <value>Un estado es necesario (usa en pendientes si no está seguro)</value>
  </data>
  <data name="stringlength" xml:space="preserve">
    <value>Por favor, introduzca un máximo de {1} caracteres</value>
  </data>
  <data name="transportFee" xml:space="preserve">
    <value>Tarifa de transporte</value>
  </data>
  <data name="transportFeeExtra" xml:space="preserve">
    <value>Extra tarifa de transporte</value>
  </data>
  <data name="transportFeerequired" xml:space="preserve">
    <value>Una tarifa se requiere. (puede ser de $0)</value>
  </data>
  <data name="transportMethodID" xml:space="preserve">
    <value>método de Transporte</value>
  </data>
  <data name="transportMethodIDrequired" xml:space="preserve">
    <value>Un método de transporte es obligatorio</value>
  </data>
  <data name="typeOfWorkID" xml:space="preserve">
    <value>Tipo de trabajo</value>
  </data>
  <data name="typeOfWorkIDrequired" xml:space="preserve">
    <value>Un tipo de trabajo es obligatorio</value>
  </data>
  <data name="workorderID" xml:space="preserve">
    <value>Orden #:</value>
  </data>
  <data name="workSiteAddress1" xml:space="preserve">
    <value>Dirección del trabajo sitio (1)</value>
  </data>
  <data name="workSiteAddress1required" xml:space="preserve">
    <value>An address is required</value>
  </data>
  <data name="workSiteAddress2" xml:space="preserve">
    <value>Dirección del trabajo sitio (2)</value>
  </data>
  <data name="zipcode" xml:space="preserve">
    <value>Código postal</value>
  </data>
  <data name="zipcoderequired" xml:space="preserve">
    <value>Un código postal es obligatorio</value>
  </data>
  <data name="descriptionRequired" xml:space="preserve">
    <value>Una descripción del trabajo es obligatorio</value>
  </data>
  <data name="transportFeeExtraRequired" xml:space="preserve">
    <value>Una tarifa se requiere. (puede ser de $0)</value>
  </data>
  <data name="englishShort" xml:space="preserve">
    <value>Inglés?</value>
  </data>
  <data name="lunchShort" xml:space="preserve">
    <value>Almuerzo?</value>
  </data>
  <data name="dateTimeofWork" xml:space="preserve">
    <value>Hora requerida</value>
  </data>
  <data name="dateTimeofWorkrequired" xml:space="preserve">
    <value>La fecha y la hora es obligatorio</value>
  </data>
  <data name="statusShort" xml:space="preserve">
    <value>Estado</value>
  </data>
  <data name="timeFlexible" xml:space="preserve">
    <value>Es hora de inicio es flexible?</value>
  </data>
  <data name="phoneformat" xml:space="preserve">
    <value>Por favor, utilice este formulario: ###-###-####</value>
  </data>
  <data name="paperOrderNum" xml:space="preserve">
    <value>Alternativa (de papel) para ID</value>
  </data>
  <data name="paperOrderNumFormat" xml:space="preserve">
    <value>Este número debe ser de 5 dígitos, o en blanco</value>
  </data>
  <data name="requestAdd" xml:space="preserve">
    <value>Añadir</value>
  </data>
  <data name="requestRemove" xml:space="preserve">
    <value>Remover</value>
  </data>
  <data name="requestTitle" xml:space="preserve">
    <value>Seleccionar un trabajador</value>
  </data>
  <data name="workerRequests" xml:space="preserve">
    <value>Peticiones de los trabajadores</value>
  </data>
  <data name="onlineSource" xml:space="preserve">
    <value>Creado por formulario web pedido?</value>
  </data>
  <data name="transportTransactID" xml:space="preserve">
    <value>Payment #</value>
  </data>
  <data name="transportTransactType" xml:space="preserve">
    <value>Payment Type</value>
  </data>
  <data name="workerCount" xml:space="preserve">
    <value>Worker Count</value>
  </data>
  <data name="addressWorkSite" xml:space="preserve">
    <value>Address (Work Site)</value>
  </data>
  <data name="phoneWorkSite" xml:space="preserve">
    <value>Phone (Work Site)</value>
  </data>
  <data name="disclosureAgreement" xml:space="preserve">
    <value>Disclosure Agreement Accepted</value>
  </data>
  <data name="paypal" xml:space="preserve">
    <value>PayPal</value>
  </data>
  <data name="paypalErrors" xml:space="preserve">
    <value>PayPal Errors</value>
  </data>
  <data name="paypalFee" xml:space="preserve">
    <value>PayPal Fee</value>
  </data>
  <data name="paypalPayerId" xml:space="preserve">
    <value>PayPal PayerID</value>
  </data>
  <data name="paypalToken" xml:space="preserve">
    <value>PayPal Token</value>
  </data>
  <data name="transportProviderID" xml:space="preserve">
    <value>Proveedor de transporte</value>
  </data>
</root>