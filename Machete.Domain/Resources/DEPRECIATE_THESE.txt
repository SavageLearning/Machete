Confessions from the original author, jciispam@gmail.com: 6/3/2013

When building out Machete, I copies some examples that had Data Annotations for presentation (DisplayName, 
string internationalization (i18n), error messages) at the Domain layer. It also had domain/data Annotations (required,
string length, etc) there. So, I mimiced that, using Resource (resx) files to store i18n strings.

I also wrestled with ViewModels at the presenatation layer.At the time, I thought it was a good idea to put the
annotations in the domain layer and have them pass all the way up. Doing so, I de-duplicated annotations needed
at both the domain and the presentation layer. 

In retrospect, this bad. You need a ViewModel separate from the Domain model, so you can pass information from
the controller into the views that you don't want in your domain. I've also read about some security concerns, 
where you open yourself up to additional attacks by using the same model for domain and presentation.

The downside to having a domain model and a view model is mapping. However, AutoMapper makes that concern moot.
You also have to duplicate some annotations, but that also gives flexibility where you want something more
restrictive at the presentation layer than the domain layer. Also, you have resource files in two projects, not
one.

So, don't make resource fiels here. These should be migrated to Machete.Web\Resources as ViewModels are made
for a given Domain model. The Email object is an example of making a view model and putting all of the resource
files in the presentation layer (machete.web).
