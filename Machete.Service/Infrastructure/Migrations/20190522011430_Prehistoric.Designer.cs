// <auto-generated />
using System;
using Machete.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Machete.Service.Migrations
{
    [DbContext(typeof(MacheteContext))]
    [Migration("20190522011430_Prehistoric")]
    partial class Prehistoric
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Machete.Machete.Domain.Activities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateEnd")
                        .HasColumnName("dateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("dateStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("FirstId")
                        .HasColumnName("firstID");

                    b.Property<int>("Name")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnName("nameEN")
                        .HasMaxLength(50);

                    b.Property<string>("NameEs")
                        .HasColumnName("nameES")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasMaxLength(4000);

                    b.Property<bool>("Recurring")
                        .HasColumnName("recurring");

                    b.Property<string>("Teacher")
                        .IsRequired()
                        .HasColumnName("teacher");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<string>("TypeEn")
                        .HasColumnName("typeEN")
                        .HasMaxLength(50);

                    b.Property<string>("TypeEs")
                        .HasColumnName("typeES")
                        .HasMaxLength(50);

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Machete.Machete.Domain.ActivitySignins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId")
                        .HasColumnName("activityID");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateforsignin")
                        .HasColumnName("dateforsignin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Dwccardnum")
                        .HasColumnName("dwccardnum");

                    b.Property<int?>("MemberStatus")
                        .HasColumnName("memberStatus");

                    b.Property<int?>("PersonId")
                        .HasColumnName("personID");

                    b.Property<double>("TimeZoneOffset")
                        .HasColumnName("timeZoneOffset");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .HasName("IX_activityID");

                    b.HasIndex("PersonId")
                        .HasName("IX_personID");

                    b.ToTable("ActivitySignins");
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId")
                        .HasName("PK_dbo.AspNetUserLogins");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_dbo.AspNetUserRoles");

                    b.HasIndex("RoleId")
                        .HasName("IX_RoleId");

                    b.HasIndex("UserId")
                        .HasName("IX_UserId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FailedPasswordAnswerAttemptCount");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<int>("FailedPasswordAttemptCount");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart")
                        .HasColumnType("datetime");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAnonymous");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsLockedOut");

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LegacyPasswordHash");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("LoweredEmail");

                    b.Property<string>("LoweredUserName");

                    b.Property<string>("MobileAlias");

                    b.Property<string>("MobilePin")
                        .HasColumnName("MobilePIN");

                    b.Property<string>("PasswordAnswer");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordQuestion");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Center", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Address1")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasMaxLength(50);

                    b.Property<string>("CenterContactFirstname1")
                        .HasColumnName("Center_contact_firstname1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("CenterContactLastname1")
                        .HasColumnName("Center_contact_lastname1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("City")
                        .HasMaxLength(25);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(12)
                        .IsUnicode(false);

                    b.Property<string>("State")
                        .HasMaxLength(2);

                    b.Property<string>("Zipcode")
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Center");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Configs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<bool?>("PublicConfig")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("publicConfig")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Machete.Machete.Domain.ElmahError", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("AllXml")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<int>("StatusCode");

                    b.Property<DateTime>("TimeUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ErrorId");

                    b.ToTable("ELMAH_Error");
                });

            modelBuilder.Entity("Machete.Machete.Domain.EmailWorkOrders", b =>
                {
                    b.Property<int>("EmailId")
                        .HasColumnName("Email_ID");

                    b.Property<int>("WorkOrderId")
                        .HasColumnName("WorkOrder_ID");

                    b.HasKey("EmailId", "WorkOrderId")
                        .HasName("PK_dbo.EmailWorkOrders");

                    b.HasIndex("EmailId")
                        .HasName("IX_Email_ID");

                    b.HasIndex("WorkOrderId")
                        .HasName("IX_WorkOrder_ID");

                    b.ToTable("EmailWorkOrders");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Emails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachment")
                        .HasColumnName("attachment");

                    b.Property<string>("AttachmentContentType")
                        .HasColumnName("attachmentContentType");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailFrom")
                        .HasColumnName("emailFrom")
                        .HasMaxLength(50);

                    b.Property<string>("EmailTo")
                        .IsRequired()
                        .HasColumnName("emailTo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastAttempt")
                        .HasColumnName("lastAttempt")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("StatusId")
                        .HasColumnName("statusID");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(100);

                    b.Property<int>("TransmitAttempts")
                        .HasColumnName("transmitAttempts");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Employers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnName("address1")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasMaxLength(50);

                    b.Property<bool?>("Blogparticipate")
                        .HasColumnName("blogparticipate");

                    b.Property<bool>("Business")
                        .HasColumnName("business");

                    b.Property<string>("Businessname")
                        .HasColumnName("businessname");

                    b.Property<string>("Cellphone")
                        .HasColumnName("cellphone")
                        .HasMaxLength(12);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Driverslicense")
                        .HasColumnName("driverslicense")
                        .HasMaxLength(30);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasColumnName("fax")
                        .HasMaxLength(12);

                    b.Property<bool?>("IsOnlineProfileComplete")
                        .HasColumnName("isOnlineProfileComplete");

                    b.Property<string>("Licenseplate")
                        .HasColumnName("licenseplate")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasMaxLength(4000);

                    b.Property<string>("OnlineSigninId")
                        .HasColumnName("onlineSigninID")
                        .HasMaxLength(128);

                    b.Property<bool>("OnlineSource")
                        .HasColumnName("onlineSource");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(12);

                    b.Property<bool>("ReceiveUpdates")
                        .HasColumnName("receiveUpdates");

                    b.Property<int?>("Referredby")
                        .HasColumnName("referredby");

                    b.Property<string>("ReferredbyOther")
                        .HasColumnName("referredbyOther")
                        .HasMaxLength(50);

                    b.Property<bool>("ReturnCustomer")
                        .HasColumnName("returnCustomer");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasMaxLength(2);

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Events", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateFrom")
                        .HasColumnName("dateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnName("dateTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("EventType")
                        .HasColumnName("eventType");

                    b.Property<string>("EventTypeEn")
                        .HasColumnName("eventTypeEN")
                        .HasMaxLength(50);

                    b.Property<string>("EventTypeEs")
                        .HasColumnName("eventTypeES")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnName("notes")
                        .HasMaxLength(4000);

                    b.Property<int>("PersonId")
                        .HasColumnName("PersonID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .HasName("IX_PersonID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Images", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasMaxLength(255);

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(30);

                    b.Property<string>("Parenttable")
                        .HasColumnName("parenttable")
                        .HasMaxLength(30);

                    b.Property<string>("Recordkey")
                        .HasColumnName("recordkey")
                        .HasMaxLength(20);

                    b.Property<byte[]>("Thumbnail");

                    b.Property<string>("ThumbnailMimeType")
                        .HasMaxLength(30);

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Machete.Machete.Domain.JoinEventImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnName("EventID");

                    b.Property<int>("ImageId")
                        .HasColumnName("ImageID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasName("IX_EventID");

                    b.HasIndex("ImageId")
                        .HasName("IX_ImageID");

                    b.ToTable("JoinEventImages");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Lookups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(20);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailTemplate")
                        .HasColumnName("emailTemplate");

                    b.Property<bool?>("FixedJob")
                        .HasColumnName("fixedJob");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasMaxLength(30);

                    b.Property<int?>("Level")
                        .HasColumnName("level");

                    b.Property<string>("LtrCode")
                        .HasColumnName("ltrCode")
                        .HasMaxLength(3);

                    b.Property<int?>("MinHour")
                        .HasColumnName("minHour");

                    b.Property<double?>("MinimumCost")
                        .HasColumnName("minimumCost");

                    b.Property<bool>("Selected")
                        .HasColumnName("selected");

                    b.Property<string>("SkillDescriptionEn")
                        .HasColumnName("skillDescriptionEn")
                        .HasMaxLength(300);

                    b.Property<string>("SkillDescriptionEs")
                        .HasColumnName("skillDescriptionEs")
                        .HasMaxLength(300);

                    b.Property<int?>("Sortorder")
                        .HasColumnName("sortorder");

                    b.Property<bool>("Speciality")
                        .HasColumnName("speciality");

                    b.Property<string>("Subcategory")
                        .HasColumnName("subcategory")
                        .HasMaxLength(20);

                    b.Property<string>("TextEn")
                        .IsRequired()
                        .HasColumnName("text_EN")
                        .HasMaxLength(50);

                    b.Property<string>("TextEs")
                        .IsRequired()
                        .HasColumnName("text_ES")
                        .HasMaxLength(50);

                    b.Property<int?>("TypeOfWorkId")
                        .HasColumnName("typeOfWorkID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<double?>("Wage")
                        .HasColumnName("wage");

                    b.HasKey("Id");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("Machete.Machete.Domain.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired();

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey")
                        .HasName("PK_dbo.__MigrationHistory");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Nlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Host")
                        .HasColumnName("host");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnName("level")
                        .HasMaxLength(50);

                    b.Property<string>("Logger")
                        .IsRequired()
                        .HasColumnName("logger")
                        .HasMaxLength(50);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message");

                    b.Property<int?>("RecordId")
                        .HasColumnName("recordID");

                    b.Property<string>("Source")
                        .HasColumnName("source")
                        .HasMaxLength(50);

                    b.Property<string>("Stacktrace")
                        .HasColumnName("stacktrace");

                    b.Property<DateTime>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("time_stamp")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .HasColumnName("type")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NLog");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Persons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Address1")
                        .HasColumnName("address1")
                        .HasMaxLength(50);

                    b.Property<string>("Address2")
                        .HasColumnName("address2")
                        .HasMaxLength(50);

                    b.Property<string>("Cellphone")
                        .HasColumnName("cellphone")
                        .HasMaxLength(12);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(25);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("Facebook")
                        .HasColumnName("facebook")
                        .HasMaxLength(50);

                    b.Property<string>("Firstname1")
                        .IsRequired()
                        .HasColumnName("firstname1")
                        .HasMaxLength(50);

                    b.Property<string>("Firstname2")
                        .HasColumnName("firstname2")
                        .HasMaxLength(50);

                    b.Property<string>("FullName")
                        .HasColumnName("fullName");

                    b.Property<int>("Gender")
                        .HasColumnName("gender");

                    b.Property<string>("Genderother")
                        .HasColumnName("genderother")
                        .HasMaxLength(20);

                    b.Property<string>("Lastname1")
                        .IsRequired()
                        .HasColumnName("lastname1")
                        .HasMaxLength(50);

                    b.Property<string>("Lastname2")
                        .HasColumnName("lastname2")
                        .HasMaxLength(50);

                    b.Property<string>("Nickname")
                        .HasColumnName("nickname")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(12);

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(2);

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("Zipcode")
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Machete.Machete.Domain.ReportDefinitions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnName("category");

                    b.Property<string>("ColumnsJson")
                        .HasColumnName("columnsJson");

                    b.Property<string>("CommonName")
                        .HasColumnName("commonName");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description");

                    b.Property<string>("InputsJson")
                        .HasColumnName("inputsJson");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Sqlquery")
                        .HasColumnName("sqlquery");

                    b.Property<string>("Subcategory")
                        .HasColumnName("subcategory");

                    b.Property<string>("Title")
                        .HasColumnName("title");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("ReportDefinitions");
                });

            modelBuilder.Entity("Machete.Machete.Domain.ScheduleRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Day")
                        .HasColumnName("day");

                    b.Property<int>("LeadHours")
                        .HasColumnName("leadHours");

                    b.Property<int>("MaxEndMin")
                        .HasColumnName("maxEndMin");

                    b.Property<int>("MinStartMin")
                        .HasColumnName("minStartMin");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("ScheduleRules");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Sessions", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(88);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags");

                    b.Property<int>("LockCookie");

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Locked");

                    b.Property<byte[]>("SessionItem");

                    b.Property<int>("Timeout");

                    b.HasKey("SessionId")
                        .HasName("PK__Sessions__C9F4929003E57E5D");

                    b.HasIndex("Expires");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Machete.Machete.Domain.TransportCostRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Cost")
                        .HasColumnName("cost");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxWorker")
                        .HasColumnName("maxWorker");

                    b.Property<int>("MinWorker")
                        .HasColumnName("minWorker");

                    b.Property<int>("TransportRuleId")
                        .HasColumnName("transportRuleID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("TransportRuleId")
                        .HasName("IX_transportRuleID");

                    b.ToTable("TransportCostRules");
                });

            modelBuilder.Entity("Machete.Machete.Domain.TransportProviderAvailabilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnName("available");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Day")
                        .HasColumnName("day");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<string>("LookupKey")
                        .HasColumnName("lookupKey")
                        .HasMaxLength(50);

                    b.Property<int>("TransportProviderId")
                        .HasColumnName("transportProviderID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("TransportProviderId")
                        .HasName("IX_transportProviderID");

                    b.ToTable("TransportProviderAvailabilities");
                });

            modelBuilder.Entity("Machete.Machete.Domain.TransportProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<bool>("DefaultAttribute")
                        .HasColumnName("defaultAttribute");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<int?>("Sortorder")
                        .HasColumnName("sortorder");

                    b.Property<string>("TextEn")
                        .HasColumnName("text_EN")
                        .HasMaxLength(50);

                    b.Property<string>("TextEs")
                        .HasColumnName("text_ES")
                        .HasMaxLength(50);

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("TransportProviders");
                });

            modelBuilder.Entity("Machete.Machete.Domain.TransportRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<string>("LookupKey")
                        .HasColumnName("lookupKey")
                        .HasMaxLength(50);

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("Zipcodes")
                        .HasColumnName("zipcodes")
                        .HasMaxLength(1000);

                    b.Property<string>("ZoneLabel")
                        .HasColumnName("zoneLabel")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TransportRules");
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkAssignments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active");

                    b.Property<int>("Attitude")
                        .HasColumnName("attitude");

                    b.Property<string>("Comments")
                        .HasColumnName("comments");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Days")
                        .HasColumnName("days");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(1000);

                    b.Property<int>("EnglishLevelId")
                        .HasColumnName("englishLevelID");

                    b.Property<int>("FollowDirections")
                        .HasColumnName("followDirections");

                    b.Property<string>("FullWaid")
                        .HasColumnName("fullWAID");

                    b.Property<int?>("HourRange")
                        .HasColumnName("hourRange");

                    b.Property<double>("HourlyWage")
                        .HasColumnName("hourlyWage");

                    b.Property<double?>("Hours")
                        .HasColumnName("hours");

                    b.Property<double>("MaxEarnings")
                        .HasColumnName("maxEarnings");

                    b.Property<double>("MinEarnings")
                        .HasColumnName("minEarnings");

                    b.Property<int?>("PseudoId")
                        .HasColumnName("pseudoID");

                    b.Property<int>("QualityOfWork")
                        .HasColumnName("qualityOfWork");

                    b.Property<int>("Reliability")
                        .HasColumnName("reliability");

                    b.Property<string>("SkillEn")
                        .HasColumnName("skillEN");

                    b.Property<string>("SkillEs")
                        .HasColumnName("skillES");

                    b.Property<int>("SkillId")
                        .HasColumnName("skillID");

                    b.Property<double>("Surcharge")
                        .HasColumnName("surcharge");

                    b.Property<double?>("TransportCost")
                        .HasColumnName("transportCost");

                    b.Property<int>("TransportProgram")
                        .HasColumnName("transportProgram");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<bool?>("WeightLifted")
                        .HasColumnName("weightLifted");

                    b.Property<int>("WorkOrderId")
                        .HasColumnName("workOrderID");

                    b.Property<int?>("WorkerAssignedId")
                        .HasColumnName("workerAssignedID");

                    b.Property<int?>("WorkerRating")
                        .HasColumnName("workerRating");

                    b.Property<string>("WorkerRatingComments")
                        .HasColumnName("workerRatingComments")
                        .HasMaxLength(500);

                    b.Property<int?>("WorkerSigninId")
                        .HasColumnName("workerSigninID");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId")
                        .HasName("IX_workOrderID");

                    b.HasIndex("WorkerAssignedId")
                        .HasName("IX_workerAssignedID");

                    b.HasIndex("WorkerSigninId")
                        .HasName("IX_workerSigninID");

                    b.ToTable("WorkAssignments");
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkOrders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnName("additionalNotes")
                        .HasMaxLength(1000);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnName("contactName")
                        .HasMaxLength(50);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("DateTimeofWork")
                        .HasColumnName("dateTimeofWork")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasMaxLength(4000);

                    b.Property<bool?>("DisclosureAgreement")
                        .HasColumnName("disclosureAgreement");

                    b.Property<int>("EmployerId")
                        .HasColumnName("EmployerID");

                    b.Property<bool>("EnglishRequired")
                        .HasColumnName("englishRequired");

                    b.Property<string>("EnglishRequiredNote")
                        .HasColumnName("englishRequiredNote")
                        .HasMaxLength(100);

                    b.Property<bool>("LunchSupplied")
                        .HasColumnName("lunchSupplied");

                    b.Property<bool>("OnlineSource")
                        .HasColumnName("onlineSource");

                    b.Property<int?>("PaperOrderNum")
                        .HasColumnName("paperOrderNum");

                    b.Property<bool>("PermanentPlacement")
                        .HasColumnName("permanentPlacement");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(12);

                    b.Property<double?>("PpFee")
                        .HasColumnName("ppFee");

                    b.Property<string>("PpPayerId")
                        .HasColumnName("ppPayerID")
                        .HasMaxLength(25);

                    b.Property<string>("PpPaymentId")
                        .HasColumnName("ppPaymentID")
                        .HasMaxLength(50);

                    b.Property<string>("PpPaymentToken")
                        .HasColumnName("ppPaymentToken")
                        .HasMaxLength(25);

                    b.Property<string>("PpResponse")
                        .HasColumnName("ppResponse");

                    b.Property<string>("PpState")
                        .HasColumnName("ppState")
                        .HasMaxLength(20);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasMaxLength(2);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("StatusEn")
                        .HasColumnName("statusEN")
                        .HasMaxLength(50);

                    b.Property<string>("StatusEs")
                        .HasColumnName("statusES")
                        .HasMaxLength(50);

                    b.Property<bool>("TimeFlexible")
                        .HasColumnName("timeFlexible");

                    b.Property<double>("TimeZoneOffset")
                        .HasColumnName("timeZoneOffset");

                    b.Property<double>("TransportFee")
                        .HasColumnName("transportFee");

                    b.Property<double>("TransportFeeExtra")
                        .HasColumnName("transportFeeExtra");

                    b.Property<string>("TransportMethodEn")
                        .HasColumnName("transportMethodEN");

                    b.Property<string>("TransportMethodEs")
                        .HasColumnName("transportMethodES");

                    b.Property<int>("TransportMethodId")
                        .HasColumnName("transportMethodID");

                    b.Property<int>("TransportProviderId")
                        .HasColumnName("transportProviderID");

                    b.Property<string>("TransportTransactId")
                        .HasColumnName("transportTransactID")
                        .HasMaxLength(50);

                    b.Property<int?>("TransportTransactType")
                        .HasColumnName("transportTransactType");

                    b.Property<int>("TypeOfWorkId")
                        .HasColumnName("typeOfWorkID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<int>("WaPseudoIdcounter")
                        .HasColumnName("waPseudoIDCounter");

                    b.Property<string>("WorkSiteAddress1")
                        .IsRequired()
                        .HasColumnName("workSiteAddress1")
                        .HasMaxLength(50);

                    b.Property<string>("WorkSiteAddress2")
                        .HasColumnName("workSiteAddress2")
                        .HasMaxLength(50);

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("DateTimeofWork")
                        .HasName("dateTimeofWork");

                    b.HasIndex("EmployerId")
                        .HasName("IX_EmployerID");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkerRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<int>("WorkOrderId")
                        .HasColumnName("WorkOrderID");

                    b.Property<int>("WorkerId")
                        .HasColumnName("WorkerID");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId")
                        .HasName("IX_WorkOrderID");

                    b.HasIndex("WorkerId")
                        .HasName("IX_WorkerID");

                    b.ToTable("WorkerRequests");
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkerSignins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateforsignin")
                        .HasColumnName("dateforsignin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("Dwccardnum")
                        .HasColumnName("dwccardnum");

                    b.Property<int?>("LotterySequence")
                        .HasColumnName("lottery_sequence");

                    b.Property<DateTime?>("LotteryTimestamp")
                        .HasColumnName("lottery_timestamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberStatus")
                        .HasColumnName("memberStatus");

                    b.Property<double>("TimeZoneOffset")
                        .HasColumnName("timeZoneOffset");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<int?>("WorkAssignmentId")
                        .HasColumnName("WorkAssignmentID");

                    b.Property<int?>("WorkerId")
                        .HasColumnName("WorkerID");

                    b.HasKey("Id");

                    b.HasIndex("WorkerId")
                        .HasName("IX_WorkerID");

                    b.ToTable("WorkerSignins");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Workers", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<bool?>("Active")
                        .HasColumnName("active");

                    b.Property<int?>("AmericanBornChildren")
                        .HasColumnName("americanBornChildren");

                    b.Property<bool?>("Carinsurance")
                        .HasColumnName("carinsurance");

                    b.Property<int?>("CountryoforiginId")
                        .HasColumnName("countryoforiginID");

                    b.Property<string>("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("dateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfMembership")
                        .HasColumnName("dateOfMembership")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateinUsa")
                        .HasColumnName("dateinUSA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Dateinseattle")
                        .HasColumnName("dateinseattle")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("Disabilitydesc")
                        .HasColumnName("disabilitydesc")
                        .HasMaxLength(50);

                    b.Property<bool?>("Disabled")
                        .HasColumnName("disabled");

                    b.Property<bool?>("Driverslicense")
                        .HasColumnName("driverslicense");

                    b.Property<int>("Dwccardnum")
                        .HasColumnName("dwccardnum");

                    b.Property<int?>("EducationLevel")
                        .HasColumnName("educationLevel");

                    b.Property<string>("EmcontUsaname")
                        .HasColumnName("emcontUSAname")
                        .HasMaxLength(50);

                    b.Property<string>("EmcontUsaphone")
                        .HasColumnName("emcontUSAphone")
                        .HasMaxLength(14);

                    b.Property<string>("EmcontUsarelation")
                        .HasColumnName("emcontUSArelation")
                        .HasMaxLength(30);

                    b.Property<string>("Emcontoriginname")
                        .HasColumnName("emcontoriginname")
                        .HasMaxLength(50);

                    b.Property<string>("Emcontoriginphone")
                        .HasColumnName("emcontoriginphone")
                        .HasMaxLength(14);

                    b.Property<string>("Emcontoriginrelation")
                        .HasColumnName("emcontoriginrelation")
                        .HasMaxLength(30);

                    b.Property<int>("EnglishlevelId")
                        .HasColumnName("englishlevelID");

                    b.Property<int?>("FarmLaborCharacteristics")
                        .HasColumnName("farmLaborCharacteristics");

                    b.Property<string>("FullNameAndId")
                        .HasColumnName("fullNameAndID")
                        .HasMaxLength(100);

                    b.Property<bool?>("HealthInsurance")
                        .HasColumnName("healthInsurance");

                    b.Property<DateTime?>("HealthInsuranceDate")
                        .HasColumnName("healthInsuranceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Height")
                        .HasColumnName("height")
                        .HasMaxLength(50);

                    b.Property<bool?>("Homeless")
                        .HasColumnName("homeless");

                    b.Property<int?>("HousingType")
                        .HasColumnName("housingType");

                    b.Property<int?>("ImageId")
                        .HasColumnName("ImageID");

                    b.Property<bool?>("Immigrantrefugee")
                        .HasColumnName("immigrantrefugee");

                    b.Property<int?>("IncomeId")
                        .HasColumnName("incomeID");

                    b.Property<int?>("IncomeSourceId")
                        .HasColumnName("incomeSourceID");

                    b.Property<DateTime?>("Insuranceexpiration")
                        .HasColumnName("insuranceexpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("IntroToCenter")
                        .HasColumnName("introToCenter")
                        .HasMaxLength(1000);

                    b.Property<double?>("LastPaymentAmount")
                        .HasColumnName("lastPaymentAmount");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnName("lastPaymentDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Lgbtq")
                        .HasColumnName("lgbtq");

                    b.Property<DateTime?>("Licenseexpirationdate")
                        .HasColumnName("licenseexpirationdate")
                        .HasColumnType("datetime");

                    b.Property<string>("LiveWithDescription")
                        .HasColumnName("liveWithDescription")
                        .HasMaxLength(1000);

                    b.Property<bool?>("LiveWithSpouse")
                        .HasColumnName("liveWithSpouse");

                    b.Property<bool?>("Livealone")
                        .HasColumnName("livealone");

                    b.Property<bool?>("Livewithchildren")
                        .HasColumnName("livewithchildren");

                    b.Property<int?>("Maritalstatus")
                        .HasColumnName("maritalstatus");

                    b.Property<DateTime?>("MemberReactivateDate")
                        .HasColumnName("memberReactivateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberStatus")
                        .HasColumnName("memberStatus");

                    b.Property<string>("MemberStatusEn")
                        .HasColumnName("memberStatusEN")
                        .HasMaxLength(50);

                    b.Property<string>("MemberStatusEs")
                        .HasColumnName("memberStatusES")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Memberexpirationdate")
                        .HasColumnName("memberexpirationdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NeighborhoodId")
                        .HasColumnName("neighborhoodID");

                    b.Property<int?>("NumChildrenUnder18")
                        .HasColumnName("numChildrenUnder18");

                    b.Property<int?>("Numofchildren")
                        .HasColumnName("numofchildren");

                    b.Property<bool?>("OwnTools")
                        .HasColumnName("ownTools");

                    b.Property<int?>("RaceId")
                        .HasColumnName("RaceID");

                    b.Property<string>("Raceother")
                        .HasColumnName("raceother")
                        .HasMaxLength(20);

                    b.Property<bool?>("Recentarrival")
                        .HasColumnName("recentarrival");

                    b.Property<int?>("Skill1")
                        .HasColumnName("skill1");

                    b.Property<int?>("Skill2")
                        .HasColumnName("skill2");

                    b.Property<int?>("Skill3")
                        .HasColumnName("skill3");

                    b.Property<string>("SkillCodes")
                        .HasColumnName("skillCodes");

                    b.Property<string>("TypeOfWork")
                        .HasColumnName("typeOfWork");

                    b.Property<int>("TypeOfWorkId")
                        .HasColumnName("typeOfWorkID");

                    b.Property<string>("Updatedby")
                        .HasMaxLength(30);

                    b.Property<bool?>("UsVeteran")
                        .HasColumnName("usVeteran");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnName("vehicleTypeID");

                    b.Property<double?>("WageTheftRecoveryAmount")
                        .HasColumnName("wageTheftRecoveryAmount");

                    b.Property<bool?>("WageTheftVictim")
                        .HasColumnName("wageTheftVictim");

                    b.Property<string>("Weight")
                        .HasColumnName("weight")
                        .HasMaxLength(10);

                    b.Property<float?>("WorkerRating")
                        .HasColumnName("workerRating");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IX_ID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Machete.Machete.Domain.ActivitySignins", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Activities", "Activity")
                        .WithMany("ActivitySignins")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_dbo.ActivitySignins_dbo.Activities_activityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Machete.Domain.Persons", "Person")
                        .WithMany("ActivitySignins")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_dbo.ActivitySignins_dbo.Persons_personID");
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUserClaims", b =>
                {
                    b.HasOne("Machete.Machete.Domain.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_User_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUserLogins", b =>
                {
                    b.HasOne("Machete.Machete.Domain.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.AspNetUserRoles", b =>
                {
                    b.HasOne("Machete.Machete.Domain.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Machete.Domain.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.EmailWorkOrders", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Emails", "Email")
                        .WithMany("EmailWorkOrders")
                        .HasForeignKey("EmailId")
                        .HasConstraintName("FK_dbo.EmailWorkOrders_dbo.Emails_Email_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.Events", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Persons", "Person")
                        .WithMany("Events")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_dbo.Events_dbo.Persons_PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.JoinEventImages", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Events", "Event")
                        .WithMany("JoinEventImages")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.JoinEventImages_dbo.Events_EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Machete.Domain.Images", "Image")
                        .WithMany("JoinEventImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_dbo.JoinEventImages_dbo.Images_ImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.TransportCostRules", b =>
                {
                    b.HasOne("Machete.Machete.Domain.TransportRules", "TransportRule")
                        .WithMany("TransportCostRules")
                        .HasForeignKey("TransportRuleId")
                        .HasConstraintName("FK_dbo.TransportCostRules_dbo.TransportRules_transportRuleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.TransportProviderAvailabilities", b =>
                {
                    b.HasOne("Machete.Machete.Domain.TransportProviders", "TransportProvider")
                        .WithMany("TransportProviderAvailabilities")
                        .HasForeignKey("TransportProviderId")
                        .HasConstraintName("FK_dbo.TransportProviderAvailabilities_dbo.TransportProviders_transportProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkAssignments", b =>
                {
                    b.HasOne("Machete.Machete.Domain.WorkOrders", "WorkOrder")
                        .WithMany("WorkAssignments")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_dbo.WorkAssignments_dbo.WorkOrders_workOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Machete.Domain.Workers", "WorkerAssigned")
                        .WithMany("WorkAssignments")
                        .HasForeignKey("WorkerAssignedId")
                        .HasConstraintName("FK_dbo.WorkAssignments_dbo.Workers_workerAssignedID");

                    b.HasOne("Machete.Machete.Domain.WorkerSignins", "WorkerSignin")
                        .WithMany("WorkAssignments")
                        .HasForeignKey("WorkerSigninId")
                        .HasConstraintName("FK_dbo.WorkAssignments_dbo.WorkerSignins_workerSigninID");
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkOrders", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Employers", "Employer")
                        .WithMany("WorkOrders")
                        .HasForeignKey("EmployerId")
                        .HasConstraintName("FK_dbo.WorkOrders_dbo.Employers_EmployerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkerRequests", b =>
                {
                    b.HasOne("Machete.Machete.Domain.WorkOrders", "WorkOrder")
                        .WithMany("WorkerRequests")
                        .HasForeignKey("WorkOrderId")
                        .HasConstraintName("FK_dbo.WorkerRequests_dbo.WorkOrders_WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Machete.Domain.Workers", "Worker")
                        .WithMany("WorkerRequests")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK_dbo.WorkerRequests_dbo.Workers_WorkerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Machete.Domain.WorkerSignins", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Workers", "Worker")
                        .WithMany("WorkerSignins")
                        .HasForeignKey("WorkerId")
                        .HasConstraintName("FK_dbo.WorkerSignins_dbo.Workers_WorkerID");
                });

            modelBuilder.Entity("Machete.Machete.Domain.Workers", b =>
                {
                    b.HasOne("Machete.Machete.Domain.Persons", "IdNavigation")
                        .WithOne("Workers")
                        .HasForeignKey("Machete.Machete.Domain.Workers", "Id")
                        .HasConstraintName("FK_dbo.Workers_dbo.Persons_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
