// <auto-generated />
using System;
using Machete.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Machete.Service.Migrations
{
    [DbContext(typeof(MacheteContext))]
    [Migration("20200730093802_WOWASummarySqlView")]
    partial class WOWASummarySqlView
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Machete.Service.Identity.MacheteRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Machete.Service.Identity.MacheteUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<Guid>("ApplicationId");

                    b.Property<string>("Comment");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("FailedPasswordAnswerAttemptCount");

                    b.Property<DateTime>("FailedPasswordAnswerAttemptWindowStart");

                    b.Property<int>("FailedPasswordAttemptCount");

                    b.Property<DateTime>("FailedPasswordAttemptWindowStart");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAnonymous");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsLockedOut");

                    b.Property<DateTime>("LastActivityDate");

                    b.Property<DateTime>("LastLockoutDate");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("LastPasswordChangedDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("LoweredEmail");

                    b.Property<string>("LoweredUserName");

                    b.Property<string>("MobileAlias");

                    b.Property<string>("MobilePIN");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordAnswer");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordQuestion");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Machete.Service.Identity.MacheteUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Machete.Service.Identity.MacheteUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Machete.Domain.Activity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dateEnd")
                        .HasColumnName("dateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateStart")
                        .HasColumnName("dateStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("firstID")
                        .HasColumnName("firstID");

                    b.Property<string>("nameEN")
                        .HasColumnName("nameEN")
                        .HasMaxLength(50);

                    b.Property<string>("nameES")
                        .HasColumnName("nameES")
                        .HasMaxLength(50);

                    b.Property<int>("nameID")
                        .HasColumnName("name");

                    b.Property<string>("notes")
                        .HasColumnName("notes")
                        .HasMaxLength(4000);

                    b.Property<bool>("recurring")
                        .HasColumnName("recurring");

                    b.Property<string>("teacher")
                        .IsRequired()
                        .HasColumnName("teacher");

                    b.Property<string>("typeEN")
                        .HasColumnName("typeEN")
                        .HasMaxLength(50);

                    b.Property<string>("typeES")
                        .HasColumnName("typeES")
                        .HasMaxLength(50);

                    b.Property<int>("typeID")
                        .HasColumnName("type");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Machete.Domain.ActivitySignin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("activityID")
                        .HasColumnName("activityID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateforsignin")
                        .HasColumnName("dateforsignin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("dwccardnum")
                        .HasColumnName("dwccardnum");

                    b.Property<int?>("memberStatusID")
                        .HasColumnName("memberStatus");

                    b.Property<int?>("personID")
                        .HasColumnName("personID");

                    b.Property<double>("timeZoneOffset")
                        .HasColumnName("timeZoneOffset");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("activityID")
                        .HasName("IX_activityID");

                    b.HasIndex("personID")
                        .HasName("IX_personID");

                    b.ToTable("ActivitySignins");
                });

            modelBuilder.Entity("Machete.Domain.Config", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category")
                        .HasColumnName("category");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnName("description");

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<bool>("publicConfig")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("publicConfig")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasMaxLength(5000);

                    b.HasKey("ID");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("Machete.Domain.Email", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("attachment")
                        .HasColumnName("attachment");

                    b.Property<string>("attachmentContentType")
                        .HasColumnName("attachmentContentType");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("emailFrom")
                        .HasColumnName("emailFrom")
                        .HasMaxLength(50);

                    b.Property<string>("emailTo")
                        .IsRequired()
                        .HasColumnName("emailTo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("lastAttempt")
                        .HasColumnName("lastAttempt")
                        .HasColumnType("datetime");

                    b.Property<int>("statusID")
                        .HasColumnName("statusID");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnName("subject")
                        .HasMaxLength(100);

                    b.Property<int>("transmitAttempts")
                        .HasColumnName("transmitAttempts");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Machete.Domain.EmailWorkOrder", b =>
                {
                    b.Property<int>("EmailID")
                        .HasColumnName("Email_ID");

                    b.Property<int>("WorkOrderID")
                        .HasColumnName("WorkOrder_ID");

                    b.Property<int>("ID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated");

                    b.Property<DateTime>("dateupdated");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("EmailID", "WorkOrderID")
                        .HasName("PK_dbo.EmailWorkOrders");

                    b.HasIndex("EmailID")
                        .HasName("IX_Email_ID");

                    b.HasIndex("WorkOrderID")
                        .HasName("IX_WorkOrder_ID");

                    b.ToTable("EmailWorkOrder");
                });

            modelBuilder.Entity("Machete.Domain.Employer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .HasColumnName("active");

                    b.Property<string>("address1")
                        .IsRequired()
                        .HasColumnName("address1")
                        .HasMaxLength(50);

                    b.Property<string>("address2")
                        .HasColumnName("address2")
                        .HasMaxLength(50);

                    b.Property<bool?>("blogparticipate")
                        .HasColumnName("blogparticipate");

                    b.Property<bool>("business")
                        .HasColumnName("business");

                    b.Property<string>("businessname")
                        .HasColumnName("businessname");

                    b.Property<string>("cellphone")
                        .HasColumnName("cellphone")
                        .HasMaxLength(12);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("driverslicense")
                        .HasColumnName("driverslicense")
                        .HasMaxLength(30);

                    b.Property<string>("email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("fax")
                        .HasColumnName("fax")
                        .HasMaxLength(12);

                    b.Property<bool?>("isOnlineProfileComplete")
                        .HasColumnName("isOnlineProfileComplete");

                    b.Property<string>("licenseplate")
                        .HasColumnName("licenseplate")
                        .HasMaxLength(10);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<string>("notes")
                        .HasColumnName("notes")
                        .HasMaxLength(4000);

                    b.Property<string>("onlineSigninID")
                        .HasColumnName("onlineSigninID")
                        .HasMaxLength(128);

                    b.Property<bool>("onlineSource")
                        .HasColumnName("onlineSource");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(12);

                    b.Property<bool>("receiveUpdates")
                        .HasColumnName("receiveUpdates");

                    b.Property<int?>("referredby")
                        .HasColumnName("referredby");

                    b.Property<string>("referredbyOther")
                        .HasColumnName("referredbyOther")
                        .HasMaxLength(50);

                    b.Property<bool>("returnCustomer")
                        .HasColumnName("returnCustomer");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasMaxLength(2);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Employers");
                });

            modelBuilder.Entity("Machete.Domain.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonID")
                        .HasColumnName("PersonID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dateFrom")
                        .HasColumnName("dateFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dateTo")
                        .HasColumnName("dateTo")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("eventTypeEN")
                        .HasColumnName("eventTypeEN")
                        .HasMaxLength(50);

                    b.Property<string>("eventTypeES")
                        .HasColumnName("eventTypeES")
                        .HasMaxLength(50);

                    b.Property<int>("eventTypeID")
                        .HasColumnName("eventType");

                    b.Property<string>("notes")
                        .HasColumnName("notes")
                        .HasMaxLength(4000);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("PersonID")
                        .HasName("IX_PersonID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Machete.Domain.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("ImageData");

                    b.Property<string>("ImageMimeType")
                        .HasMaxLength(30);

                    b.Property<byte[]>("Thumbnail");

                    b.Property<string>("ThumbnailMimeType")
                        .HasMaxLength(30);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("filename")
                        .HasColumnName("filename")
                        .HasMaxLength(255);

                    b.Property<string>("parenttable")
                        .HasColumnName("parenttable")
                        .HasMaxLength(30);

                    b.Property<string>("recordkey")
                        .HasColumnName("recordkey")
                        .HasMaxLength(20);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Machete.Domain.JoinEventImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventID")
                        .HasColumnName("EventID");

                    b.Property<int>("ImageID")
                        .HasColumnName("ImageID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("EventID")
                        .HasName("IX_EventID");

                    b.HasIndex("ImageID")
                        .HasName("IX_ImageID");

                    b.ToTable("JoinEventImage");
                });

            modelBuilder.Entity("Machete.Domain.Lookup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnName("category")
                        .HasMaxLength(20);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("emailTemplate")
                        .HasColumnName("emailTemplate")
                        .HasColumnType("nvarchar(4000)")
                        .HasMaxLength(4000);

                    b.Property<bool?>("fixedJob")
                        .HasColumnName("fixedJob");

                    b.Property<string>("key")
                        .HasColumnName("key")
                        .HasMaxLength(30);

                    b.Property<int?>("level")
                        .HasColumnName("level");

                    b.Property<string>("ltrCode")
                        .HasColumnName("ltrCode")
                        .HasMaxLength(3);

                    b.Property<int?>("minHour")
                        .HasColumnName("minHour");

                    b.Property<double?>("minimumCost")
                        .HasColumnName("minimumCost");

                    b.Property<bool>("selected")
                        .HasColumnName("selected");

                    b.Property<string>("skillDescriptionEn")
                        .HasColumnName("skillDescriptionEn")
                        .HasMaxLength(300);

                    b.Property<string>("skillDescriptionEs")
                        .HasColumnName("skillDescriptionEs")
                        .HasMaxLength(300);

                    b.Property<int?>("sortorder")
                        .HasColumnName("sortorder");

                    b.Property<bool>("speciality")
                        .HasColumnName("speciality");

                    b.Property<string>("subcategory")
                        .HasColumnName("subcategory")
                        .HasMaxLength(20);

                    b.Property<string>("text_EN")
                        .IsRequired()
                        .HasColumnName("text_EN")
                        .HasMaxLength(50);

                    b.Property<string>("text_ES")
                        .IsRequired()
                        .HasColumnName("text_ES")
                        .HasMaxLength(50);

                    b.Property<int?>("typeOfWorkID")
                        .HasColumnName("typeOfWorkID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<double?>("wage")
                        .HasColumnName("wage");

                    b.HasKey("ID");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("Machete.Domain.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .HasColumnName("active");

                    b.Property<string>("address1")
                        .HasColumnName("address1")
                        .HasMaxLength(50);

                    b.Property<string>("address2")
                        .HasColumnName("address2")
                        .HasMaxLength(50);

                    b.Property<string>("cellphone")
                        .HasColumnName("cellphone")
                        .HasMaxLength(12);

                    b.Property<string>("city")
                        .HasColumnName("city")
                        .HasMaxLength(25);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .HasColumnName("email")
                        .HasMaxLength(50);

                    b.Property<string>("facebook")
                        .HasColumnName("facebook")
                        .HasMaxLength(50);

                    b.Property<string>("firstname1")
                        .IsRequired()
                        .HasColumnName("firstname1")
                        .HasMaxLength(50);

                    b.Property<string>("firstname2")
                        .HasColumnName("firstname2")
                        .HasMaxLength(50);

                    b.Property<string>("fullName")
                        .HasColumnName("fullName");

                    b.Property<int>("gender")
                        .HasColumnName("gender");

                    b.Property<string>("genderother")
                        .HasColumnName("genderother")
                        .HasMaxLength(20);

                    b.Property<string>("lastname1")
                        .IsRequired()
                        .HasColumnName("lastname1")
                        .HasMaxLength(50);

                    b.Property<string>("lastname2")
                        .HasColumnName("lastname2")
                        .HasMaxLength(50);

                    b.Property<string>("nickname")
                        .HasColumnName("nickname")
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .HasColumnName("phone")
                        .HasMaxLength(12);

                    b.Property<string>("state")
                        .HasColumnName("state")
                        .HasMaxLength(2);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("zipcode")
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Machete.Domain.ReportDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category")
                        .HasColumnName("category");

                    b.Property<string>("columnsJson")
                        .HasColumnName("columnsJson");

                    b.Property<string>("commonName")
                        .HasColumnName("commonName");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnName("description");

                    b.Property<string>("inputsJson")
                        .HasColumnName("inputsJson");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<string>("sqlquery")
                        .HasColumnName("sqlquery");

                    b.Property<string>("subcategory")
                        .HasColumnName("subcategory");

                    b.Property<string>("title")
                        .HasColumnName("title");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("ReportDefinitions");
                });

            modelBuilder.Entity("Machete.Domain.ScheduleRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("day")
                        .HasColumnName("day");

                    b.Property<int>("leadHours")
                        .HasColumnName("leadHours");

                    b.Property<int>("maxEndMin")
                        .HasColumnName("maxEndMin");

                    b.Property<int>("minStartMin")
                        .HasColumnName("minStartMin");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("ScheduleRules");
                });

            modelBuilder.Entity("Machete.Domain.TransportCostRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("cost")
                        .HasColumnName("cost");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("maxWorker")
                        .HasColumnName("maxWorker");

                    b.Property<int>("minWorker")
                        .HasColumnName("minWorker");

                    b.Property<int>("transportRuleID")
                        .HasColumnName("transportRuleID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("transportRuleID")
                        .HasName("IX_transportRuleID");

                    b.ToTable("TransportCostRules");
                });

            modelBuilder.Entity("Machete.Domain.TransportProvider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .HasColumnName("active");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<bool>("defaultAttribute")
                        .HasColumnName("defaultAttribute");

                    b.Property<string>("key")
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<int?>("sortorder")
                        .HasColumnName("sortorder");

                    b.Property<string>("text_EN")
                        .HasColumnName("text_EN")
                        .HasMaxLength(50);

                    b.Property<string>("text_ES")
                        .HasColumnName("text_ES")
                        .HasMaxLength(50);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("TransportProviders");
                });

            modelBuilder.Entity("Machete.Domain.TransportProviderAvailabilities", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("available")
                        .HasColumnName("available");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("day")
                        .HasColumnName("day");

                    b.Property<string>("key")
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<string>("lookupKey")
                        .HasColumnName("lookupKey")
                        .HasMaxLength(50);

                    b.Property<int>("transportProviderID")
                        .HasColumnName("transportProviderID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("transportProviderID")
                        .HasName("IX_transportProviderID");

                    b.ToTable("TransportProviderAvailabilities");
                });

            modelBuilder.Entity("Machete.Domain.TransportRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("key")
                        .HasColumnName("key")
                        .HasMaxLength(50);

                    b.Property<string>("lookupKey")
                        .HasColumnName("lookupKey")
                        .HasMaxLength(50);

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<string>("zipcodes")
                        .HasColumnName("zipcodes")
                        .HasMaxLength(1000);

                    b.Property<string>("zoneLabel")
                        .HasColumnName("zoneLabel")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("TransportRules");
                });

            modelBuilder.Entity("Machete.Domain.WorkAssignment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("active")
                        .HasColumnName("active");

                    b.Property<int>("attitude")
                        .HasColumnName("attitude");

                    b.Property<string>("comments")
                        .HasColumnName("comments");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("days")
                        .HasColumnName("days");

                    b.Property<string>("description")
                        .HasColumnName("description")
                        .HasMaxLength(1000);

                    b.Property<int>("englishLevelID")
                        .HasColumnName("englishLevelID");

                    b.Property<int>("followDirections")
                        .HasColumnName("followDirections");

                    b.Property<string>("fullWAID")
                        .HasColumnName("fullWAID");

                    b.Property<int?>("hourRange")
                        .HasColumnName("hourRange");

                    b.Property<double>("hourlyWage")
                        .HasColumnName("hourlyWage");

                    b.Property<double>("hours")
                        .HasColumnName("hours");

                    b.Property<double>("maxEarnings")
                        .HasColumnName("maxEarnings");

                    b.Property<double>("minEarnings")
                        .HasColumnName("minEarnings");

                    b.Property<int?>("pseudoID")
                        .HasColumnName("pseudoID");

                    b.Property<int>("qualityOfWork")
                        .HasColumnName("qualityOfWork");

                    b.Property<int>("reliability")
                        .HasColumnName("reliability");

                    b.Property<string>("skillEN")
                        .HasColumnName("skillEN");

                    b.Property<string>("skillES")
                        .HasColumnName("skillES");

                    b.Property<int>("skillID")
                        .HasColumnName("skillID");

                    b.Property<double>("surcharge")
                        .HasColumnName("surcharge");

                    b.Property<double?>("transportCost")
                        .HasColumnName("transportCost");

                    b.Property<int>("transportProgram")
                        .HasColumnName("transportProgram");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<bool?>("weightLifted")
                        .HasColumnName("weightLifted");

                    b.Property<int>("workOrderID")
                        .HasColumnName("workOrderID");

                    b.Property<int?>("workerAssignedID")
                        .HasColumnName("workerAssignedID");

                    b.Property<int?>("workerRating")
                        .HasColumnName("workerRating");

                    b.Property<string>("workerRatingComments")
                        .HasColumnName("workerRatingComments")
                        .HasMaxLength(500);

                    b.Property<int?>("workerSigninID")
                        .HasColumnName("workerSigninID");

                    b.HasKey("ID");

                    b.HasIndex("workOrderID")
                        .HasName("IX_workOrderID");

                    b.HasIndex("workerAssignedID")
                        .HasName("IX_workerAssignedID");

                    b.HasIndex("workerSigninID")
                        .HasName("IX_workerSigninID");

                    b.ToTable("WorkAssignments");
                });

            modelBuilder.Entity("Machete.Domain.WorkOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployerID")
                        .HasColumnName("EmployerID");

                    b.Property<string>("additionalNotes")
                        .HasColumnName("additionalNotes")
                        .HasMaxLength(1000);

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("contactName")
                        .IsRequired()
                        .HasColumnName("contactName")
                        .HasMaxLength(50);

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("dateTimeofWork")
                        .HasColumnName("dateTimeofWork")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .HasColumnName("description")
                        .HasMaxLength(4000);

                    b.Property<bool?>("disclosureAgreement")
                        .HasColumnName("disclosureAgreement");

                    b.Property<bool>("englishRequired")
                        .HasColumnName("englishRequired");

                    b.Property<string>("englishRequiredNote")
                        .HasColumnName("englishRequiredNote")
                        .HasMaxLength(100);

                    b.Property<bool>("lunchSupplied")
                        .HasColumnName("lunchSupplied");

                    b.Property<bool>("onlineSource")
                        .HasColumnName("onlineSource");

                    b.Property<int?>("paperOrderNum")
                        .HasColumnName("paperOrderNum");

                    b.Property<bool>("permanentPlacement")
                        .HasColumnName("permanentPlacement");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnName("phone")
                        .HasMaxLength(12);

                    b.Property<double?>("ppFee")
                        .HasColumnName("ppFee");

                    b.Property<string>("ppPayerID")
                        .HasColumnName("ppPayerID")
                        .HasMaxLength(25);

                    b.Property<string>("ppPaymentID")
                        .HasColumnName("ppPaymentID")
                        .HasMaxLength(50);

                    b.Property<string>("ppPaymentToken")
                        .HasColumnName("ppPaymentToken")
                        .HasMaxLength(25);

                    b.Property<string>("ppResponse")
                        .HasColumnName("ppResponse")
                        .HasMaxLength(5000);

                    b.Property<string>("ppState")
                        .HasColumnName("ppState")
                        .HasMaxLength(20);

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnName("state")
                        .HasMaxLength(2);

                    b.Property<string>("statusEN")
                        .HasColumnName("statusEN")
                        .HasMaxLength(50);

                    b.Property<string>("statusES")
                        .HasColumnName("statusES")
                        .HasMaxLength(50);

                    b.Property<int>("statusID")
                        .HasColumnName("status");

                    b.Property<bool>("timeFlexible")
                        .HasColumnName("timeFlexible");

                    b.Property<double>("timeZoneOffset")
                        .HasColumnName("timeZoneOffset");

                    b.Property<double>("transportFee")
                        .HasColumnName("transportFee");

                    b.Property<double>("transportFeeExtra")
                        .HasColumnName("transportFeeExtra");

                    b.Property<string>("transportMethodEN")
                        .HasColumnName("transportMethodEN");

                    b.Property<string>("transportMethodES")
                        .HasColumnName("transportMethodES");

                    b.Property<int>("transportMethodID")
                        .HasColumnName("transportMethodID");

                    b.Property<int>("transportProviderID")
                        .HasColumnName("transportProviderID");

                    b.Property<string>("transportTransactID")
                        .HasColumnName("transportTransactID")
                        .HasMaxLength(50);

                    b.Property<int?>("transportTransactType")
                        .HasColumnName("transportTransactType");

                    b.Property<int>("typeOfWorkID")
                        .HasColumnName("typeOfWorkID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<int>("waPseudoIDCounter")
                        .HasColumnName("waPseudoIDCounter");

                    b.Property<string>("workSiteAddress1")
                        .IsRequired()
                        .HasColumnName("workSiteAddress1")
                        .HasMaxLength(50);

                    b.Property<string>("workSiteAddress2")
                        .HasColumnName("workSiteAddress2")
                        .HasMaxLength(50);

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasColumnName("zipcode")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("EmployerID")
                        .HasName("IX_EmployerID");

                    b.HasIndex("dateTimeofWork")
                        .HasName("dateTimeofWork");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Machete.Domain.Worker", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnName("ID");

                    b.Property<int?>("ImageID")
                        .HasColumnName("ImageID");

                    b.Property<int?>("RaceID")
                        .HasColumnName("RaceID");

                    b.Property<bool?>("active")
                        .HasColumnName("active");

                    b.Property<int?>("americanBornChildren")
                        .HasColumnName("americanBornChildren");

                    b.Property<bool?>("carinsurance")
                        .HasColumnName("carinsurance");

                    b.Property<int?>("countryoforiginID")
                        .HasColumnName("countryoforiginID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime?>("dateOfBirth")
                        .HasColumnName("dateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateOfMembership")
                        .HasColumnName("dateOfMembership")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dateinUSA")
                        .HasColumnName("dateinUSA")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("dateinseattle")
                        .HasColumnName("dateinseattle")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("disabilitydesc")
                        .HasColumnName("disabilitydesc")
                        .HasMaxLength(50);

                    b.Property<bool?>("disabled")
                        .HasColumnName("disabled");

                    b.Property<bool?>("driverslicense")
                        .HasColumnName("driverslicense");

                    b.Property<int>("dwccardnum")
                        .HasColumnName("dwccardnum");

                    b.Property<int?>("educationLevel")
                        .HasColumnName("educationLevel");

                    b.Property<string>("emcontUSAname")
                        .HasColumnName("emcontUSAname")
                        .HasMaxLength(50);

                    b.Property<string>("emcontUSAphone")
                        .HasColumnName("emcontUSAphone")
                        .HasMaxLength(14);

                    b.Property<string>("emcontUSArelation")
                        .HasColumnName("emcontUSArelation")
                        .HasMaxLength(30);

                    b.Property<string>("emcontoriginname")
                        .HasColumnName("emcontoriginname")
                        .HasMaxLength(50);

                    b.Property<string>("emcontoriginphone")
                        .HasColumnName("emcontoriginphone")
                        .HasMaxLength(14);

                    b.Property<string>("emcontoriginrelation")
                        .HasColumnName("emcontoriginrelation")
                        .HasMaxLength(30);

                    b.Property<int>("englishlevelID")
                        .HasColumnName("englishlevelID");

                    b.Property<int?>("farmLaborCharacteristics")
                        .HasColumnName("farmLaborCharacteristics");

                    b.Property<string>("fullNameAndID")
                        .HasColumnName("fullNameAndID")
                        .HasMaxLength(100);

                    b.Property<bool?>("healthInsurance")
                        .HasColumnName("healthInsurance");

                    b.Property<DateTime?>("healthInsuranceDate")
                        .HasColumnName("healthInsuranceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("height")
                        .HasColumnName("height")
                        .HasMaxLength(50);

                    b.Property<bool?>("homeless")
                        .HasColumnName("homeless");

                    b.Property<int?>("housingType")
                        .HasColumnName("housingType");

                    b.Property<bool?>("immigrantrefugee")
                        .HasColumnName("immigrantrefugee");

                    b.Property<int?>("incomeID")
                        .HasColumnName("incomeID");

                    b.Property<int?>("incomeSourceID")
                        .HasColumnName("incomeSourceID");

                    b.Property<DateTime?>("insuranceexpiration")
                        .HasColumnName("insuranceexpiration")
                        .HasColumnType("datetime");

                    b.Property<string>("introToCenter")
                        .HasColumnName("introToCenter")
                        .HasMaxLength(1000);

                    b.Property<double?>("lastPaymentAmount")
                        .HasColumnName("lastPaymentAmount");

                    b.Property<DateTime?>("lastPaymentDate")
                        .HasColumnName("lastPaymentDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("lgbtq")
                        .HasColumnName("lgbtq");

                    b.Property<DateTime?>("licenseexpirationdate")
                        .HasColumnName("licenseexpirationdate")
                        .HasColumnType("datetime");

                    b.Property<string>("liveWithDescription")
                        .HasColumnName("liveWithDescription")
                        .HasMaxLength(1000);

                    b.Property<bool?>("liveWithSpouse")
                        .HasColumnName("liveWithSpouse");

                    b.Property<bool?>("livealone")
                        .HasColumnName("livealone");

                    b.Property<bool?>("livewithchildren")
                        .HasColumnName("livewithchildren");

                    b.Property<int?>("maritalstatus")
                        .HasColumnName("maritalstatus");

                    b.Property<DateTime?>("memberReactivateDate")
                        .HasColumnName("memberReactivateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("memberStatusEN")
                        .HasColumnName("memberStatusEN")
                        .HasMaxLength(50);

                    b.Property<string>("memberStatusES")
                        .HasColumnName("memberStatusES")
                        .HasMaxLength(50);

                    b.Property<int>("memberStatusID")
                        .HasColumnName("memberStatus");

                    b.Property<DateTime>("memberexpirationdate")
                        .HasColumnName("memberexpirationdate")
                        .HasColumnType("datetime");

                    b.Property<int?>("neighborhoodID")
                        .HasColumnName("neighborhoodID");

                    b.Property<int?>("numChildrenUnder18")
                        .HasColumnName("numChildrenUnder18");

                    b.Property<int?>("numofchildren")
                        .HasColumnName("numofchildren");

                    b.Property<bool?>("ownTools")
                        .HasColumnName("ownTools");

                    b.Property<string>("raceother")
                        .HasColumnName("raceother")
                        .HasMaxLength(20);

                    b.Property<bool?>("recentarrival")
                        .HasColumnName("recentarrival");

                    b.Property<int?>("skill1")
                        .HasColumnName("skill1");

                    b.Property<int?>("skill2")
                        .HasColumnName("skill2");

                    b.Property<int?>("skill3")
                        .HasColumnName("skill3");

                    b.Property<string>("skillCodes")
                        .HasColumnName("skillCodes");

                    b.Property<string>("typeOfWork")
                        .HasColumnName("typeOfWork");

                    b.Property<int>("typeOfWorkID")
                        .HasColumnName("typeOfWorkID");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.Property<bool?>("usVeteran")
                        .HasColumnName("usVeteran");

                    b.Property<int?>("vehicleTypeID")
                        .HasColumnName("vehicleTypeID");

                    b.Property<double?>("wageTheftRecoveryAmount")
                        .HasColumnName("wageTheftRecoveryAmount");

                    b.Property<bool?>("wageTheftVictim")
                        .HasColumnName("wageTheftVictim");

                    b.Property<string>("weight")
                        .HasColumnName("weight")
                        .HasMaxLength(10);

                    b.Property<float?>("workerRating")
                        .HasColumnName("workerRating");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique()
                        .HasName("IX_ID");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Machete.Domain.WorkerRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("WorkOrderID")
                        .HasColumnName("WorkOrderID");

                    b.Property<int>("WorkerID")
                        .HasColumnName("WorkerID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("WorkOrderID")
                        .HasName("IX_WorkOrderID");

                    b.HasIndex("WorkerID")
                        .HasName("IX_WorkerID");

                    b.ToTable("WorkerRequests");
                });

            modelBuilder.Entity("Machete.Domain.WorkerSignin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("WorkAssignmentID")
                        .HasColumnName("WorkAssignmentID");

                    b.Property<int?>("WorkerID")
                        .HasColumnName("WorkerID");

                    b.Property<string>("createdby")
                        .HasColumnName("Createdby")
                        .HasMaxLength(30);

                    b.Property<DateTime>("datecreated")
                        .HasColumnName("datecreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateforsignin")
                        .HasColumnName("dateforsignin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateupdated")
                        .HasColumnName("dateupdated")
                        .HasColumnType("datetime");

                    b.Property<int>("dwccardnum")
                        .HasColumnName("dwccardnum");

                    b.Property<int?>("lottery_sequence")
                        .HasColumnName("lottery_sequence");

                    b.Property<DateTime?>("lottery_timestamp")
                        .HasColumnName("lottery_timestamp")
                        .HasColumnType("datetime");

                    b.Property<int?>("memberStatusID")
                        .HasColumnName("memberStatus");

                    b.Property<double>("timeZoneOffset")
                        .HasColumnName("timeZoneOffset");

                    b.Property<string>("updatedby")
                        .HasColumnName("Updatedby")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("WorkerID")
                        .HasName("IX_WorkerID");

                    b.ToTable("WorkerSignins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Machete.Service.Identity.MacheteUserClaim", b =>
                {
                    b.HasOne("Machete.Service.Identity.MacheteUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Service.Identity.MacheteUserRole", b =>
                {
                    b.HasOne("Machete.Service.Identity.MacheteRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Service.Identity.MacheteUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.ActivitySignin", b =>
                {
                    b.HasOne("Machete.Domain.Activity", "Activity")
                        .WithMany("Signins")
                        .HasForeignKey("activityID")
                        .HasConstraintName("FK_dbo.ActivitySignins_dbo.Activities_activityID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Person", "person")
                        .WithMany("activitySignins")
                        .HasForeignKey("personID")
                        .HasConstraintName("FK_dbo.ActivitySignins_dbo.Persons_personID");
                });

            modelBuilder.Entity("Machete.Domain.EmailWorkOrder", b =>
                {
                    b.HasOne("Machete.Domain.Email", "Email")
                        .WithMany("EmailWorkOrders")
                        .HasForeignKey("EmailID")
                        .HasConstraintName("FK_dbo.EmailWorkOrders_dbo.Emails_Email_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.WorkOrder", "WorkOrder")
                        .WithMany("EmailWorkOrders")
                        .HasForeignKey("WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.Event", b =>
                {
                    b.HasOne("Machete.Domain.Person", "Person")
                        .WithMany("Events")
                        .HasForeignKey("PersonID")
                        .HasConstraintName("FK_dbo.Events_dbo.Persons_PersonID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.JoinEventImage", b =>
                {
                    b.HasOne("Machete.Domain.Event", "Event")
                        .WithMany("JoinEventImages")
                        .HasForeignKey("EventID")
                        .HasConstraintName("FK_dbo.JoinEventImages_dbo.Events_EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Image", "Image")
                        .WithMany("JoinEventImages")
                        .HasForeignKey("ImageID")
                        .HasConstraintName("FK_dbo.JoinEventImages_dbo.Images_ImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.TransportCostRule", b =>
                {
                    b.HasOne("Machete.Domain.TransportRule", "transportRule")
                        .WithMany("costRules")
                        .HasForeignKey("transportRuleID")
                        .HasConstraintName("FK_dbo.TransportCostRules_dbo.TransportRules_transportRuleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.TransportProviderAvailabilities", b =>
                {
                    b.HasOne("Machete.Domain.TransportProvider", "TransportProvider")
                        .WithMany("AvailabilityRules")
                        .HasForeignKey("transportProviderID")
                        .HasConstraintName("FK_dbo.TransportProviderAvailabilities_dbo.TransportProviders_transportProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.WorkAssignment", b =>
                {
                    b.HasOne("Machete.Domain.WorkOrder", "workOrder")
                        .WithMany("workAssignments")
                        .HasForeignKey("workOrderID")
                        .HasConstraintName("FK_dbo.WorkAssignments_dbo.WorkOrders_workOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Worker", "workerAssignedDDD")
                        .WithMany("workAssignments")
                        .HasForeignKey("workerAssignedID")
                        .HasConstraintName("FK_dbo.WorkAssignments_dbo.Workers_workerAssignedID");

                    b.HasOne("Machete.Domain.WorkerSignin", "workerSiginin")
                        .WithMany("workAssignments")
                        .HasForeignKey("workerSigninID")
                        .HasConstraintName("FK_dbo.WorkAssignments_dbo.WorkerSignins_workerSigninID");
                });

            modelBuilder.Entity("Machete.Domain.WorkOrder", b =>
                {
                    b.HasOne("Machete.Domain.Employer", "Employer")
                        .WithMany("WorkOrders")
                        .HasForeignKey("EmployerID")
                        .HasConstraintName("FK_dbo.WorkOrders_dbo.Employers_EmployerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.Worker", b =>
                {
                    b.HasOne("Machete.Domain.Person", "Person")
                        .WithOne("Worker")
                        .HasForeignKey("Machete.Domain.Worker", "ID")
                        .HasConstraintName("FK_dbo.Workers_dbo.Persons_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.WorkerRequest", b =>
                {
                    b.HasOne("Machete.Domain.WorkOrder", "workOrder")
                        .WithMany("workerRequestsDDD")
                        .HasForeignKey("WorkOrderID")
                        .HasConstraintName("FK_dbo.WorkerRequests_dbo.WorkOrders_WorkOrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Machete.Domain.Worker", "workerRequested")
                        .WithMany("workerRequests")
                        .HasForeignKey("WorkerID")
                        .HasConstraintName("FK_dbo.WorkerRequests_dbo.Workers_WorkerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Machete.Domain.WorkerSignin", b =>
                {
                    b.HasOne("Machete.Domain.Worker", "worker")
                        .WithMany("workersignins")
                        .HasForeignKey("WorkerID")
                        .HasConstraintName("FK_dbo.WorkerSignins_dbo.Workers_WorkerID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Machete.Service.Identity.MacheteRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Machete.Service.Identity.MacheteUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Machete.Service.Identity.MacheteUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
