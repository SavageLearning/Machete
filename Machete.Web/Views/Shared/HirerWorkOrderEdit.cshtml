@model Machete.Domain.WorkOrder
@using Machete.Web.Helpers
@using Machete.Web.Resources
@using Machete.Domain.Resources
@{
    System.Globalization.CultureInfo CI = (System.Globalization.CultureInfo)Session["Culture"];
    string recType = "WO";
    string idPrefix = recType + Model.ID + "-";
}
@Html.HiddenFor(model => model.ID, new { @class = "hiddenRecID" })
@Html.HiddenFor(model => model.EmployerID, new { @id = idPrefix + "EmployerID" })
@Html.HiddenFor(model => model.onlineSource)
@Html.HiddenFor(model => model.status)
@Html.HiddenFor(model => model.typeOfWorkID)
@Html.HiddenFor(model => model.timeFlexible)
@Html.HiddenFor(model => model.waPseudoIDCounter)
@Html.HiddenFor(model => model.transportFee, new { @id = "transportFee" })


<input type="hidden" name="workerAssignments" id="workerAssignments" value="">
<!-- Note: there are really weird quirks in the way the JS & Razor interact with these key/value pairs, so to have logic in JS that is worker center -->
<!-- specific, this config key value MUST be a unique worker center name -->
<!-- JS can't read string values from the config file, so passing the string value into a hidden field that it can interpret -->
<input type="hidden" name="workerCenter" id="workerCenter" value='@System.Web.Configuration.WebConfigurationManager.AppSettings["OrganizationName"]'>
<!-- MAIN WORK ORDER FORM -->
<div>
    <!-- Display Header information - worker center specific -->
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["CreateWOHeader_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["CreateWOHeader_ES"])
    }
</div>
<!-- TODO: Remove console.log statements -->
<!-- TODO: Share error messages (.text & .append) with Sierra -->
    <h3>Estimated Costs:</h3>
<table>
    <tr>
        <td style="color:blue">Worker Rates:</td>
        <td id="estimatedCosts">TBD</td>
    </tr>
    <div class="tb-row">
        <td style="color:blue">Transportation Fees:</td>
        <td id="transportationFees">TBD</td>
    </div>
</table>
    <p id="paypalWarning">Transportation fees must be paid via PayPal to complete order</p>
    <!-- Form errors -->
    <!-- TODO: make sure all error sections are set - consider moving these next to the fields that they apply to -->
    <div id="messageDialog">
        <p id="futureTime" style="color:red"></p>
        <p id="earliestTime" style="color:red"></p>
        <p id="latestTime" style="color:red"></p>
        <p id="invalidDate" style="color:red"></p>
        <p id="invalidZipcode" style="color:red"></p>
        <p id="invalidTransportDate" style="color:red"></p>
        <p id="requiredFieldWorkSiteAddress1" style="color:red"></p>
        <p id="requiredFieldCity" style="color:red"></p>
        <p id="requiredFieldState" style="color:red"></p>
        <p id="requiredFieldZipcode" style="color:red"></p>
        <p id="requiredFieldTransportMethod" style="color:red"></p>
        <p id="requiredFieldWorkDescription" style="color:red"></p>
        <p id="requiredFieldName" style="color:red"></p>
        <p id="requiredFieldPhone" style="color:red"></p>
        <p id="invalidFormatState" style="color:red"></p>
        <p id="invalidFormatZipcode" style="color:red"></p>
    </div>

<div class="tb-table">
    <h3>@Machete.Web.Resources.WorkOrders.workRequest</h3>
    <div class="tb-row">
        <div class="tb-label">
            @Html.Label(Machete.Web.Resources.WorkOrders.timeNeeded)
        </div>
        @Html.mUITableTextBoxFor(model => model.dateTimeofWork, new { tabindex = "1", id = idPrefix + "dateTimeofWork" })
    </div>
    <div class="tb-row">
        <div class="tb-label desc-label">
            <input type="button" value="@Machete.Web.Resources.WorkOrders.workAssignments" style="color:red" class="formButton" id="addWABtn-@(Model.ID)"/>
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestRemove" class="formButton" id="removeWABtn-@(Model.ID)"/>
        </div>
        <div class="tb-field desc-field">
            @Html.ListBox("workAssignments", Enumerable.Empty<SelectListItem>(), new { id = "workAssignments_WO-"+ Model.ID, tabindex = "2", style="min-width: 16em;"})
        </div>
    </div>
    <div class="tb-row">
        <div class="tb-label">
            <a href="#" id="workSiteAddress1Modal">@Html.Label(Machete.Web.Resources.WorkOrders.workSiteAddress1)</a>
        </div>
        @Html.mUITableTextBoxFor(model => model.workSiteAddress1, new { tabindex = "3", id = idPrefix + "workSiteAddress1" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.workSiteAddress2, new { tabindex = "4", id = idPrefix + "workSiteAddress2" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.city, new { tabindex = "5", id = idPrefix + "city" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.state, new { tabindex = "6", id = idPrefix + "state" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.zipcode, new { tabindex = "7", id = idPrefix + "zipcode" })
    </div>
    <div class="tb-row">
        <a href="#" id="transportationMethodModal">@Html.mUITableLabelFor(model => model.transportMethodID)</a>
        @Html.mUIDropDownListFor(model => model.transportMethodID,
                        new SelectList(Lookups.getSelectList(Machete.Domain.LCategory.transportmethod), "Value", "Text", Model.transportMethodID),
                        new { tabindex = "8", id = idPrefix + "transportMethodID" })
    </div>
    <div class="tb-row desc-field">
        <a href="#" id="workDescriptionModal">@Html.mUITableDescLabelFor(model => model.description)</a>
        <div class="tb-field">
            @Html.ValidationMessageFor(model => model.description)
            @Html.TextAreaFor(model => model.description, new { tabindex = "9", @class = "desc-field", id = idPrefix + "description" })
        </div>
    </div>
</div><!--tb-table main workorder table-->


<div class="tb-table">
    <h3>@Machete.Web.Resources.WorkOrders.workDetails</h3>
    
    <div class="tb-row">
        <a href="#" id="contactNameModal">@Html.Label(Machete.Web.Resources.WorkOrders.contactNameWorkSite)</a>
        @Html.mUITableTextBoxFor(model => model.contactName, new { tabindex = "25", id = idPrefix + "contactName" })
    </div>
    <div class="tb-row">
        <div class="tb-label">
            @Html.Label(Machete.Domain.Resources.WorkOrder.phoneWorkSite)
        </div>
        @Html.mUITableTextBoxFor(model => model.phone, new { tabindex = "26", id = idPrefix + "phone" })
    </div>
    <div class="tb-row">
        <div class="tb-label englishRequired_@(Model.ID)">
            @Html.LabelFor(model => model.englishRequired)
        </div>
        <div class="tb-field englishRequired_@(Model.ID)">
            @Html.mUIDropDownYesNoFor(model => model.englishRequired, new { tabindex = "27", id = idPrefix + "englishRequired" })
        </div>
    </div>
    <!-- Note: Field only appears in table when englishRequired = TRUE -->
    <div class="tb-row englishNoteRow" id="@(idPrefix)englishRequiredNoteRow">
        @Html.mUITableDescLabelFor(model => model.englishRequiredNote)
        <div class="tb-field">
            @Html.TextAreaFor(model => model.englishRequiredNote, new { tabindex = "28", @class = "desc-field", id = idPrefix + "englishRequiredNote" })
            @Html.ValidationMessageFor(model => model.englishRequiredNote)
        </div>
    </div>
    <!-- TODO: add this section back later
    <div class="tb-row">
        <div class="tb-label desc-label">
            @Html.Label(Machete.Web.Resources.WorkOrders.workersRequested)
            <br />
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestAdd" class="formButton" id="addRequestBtn-@(Model.ID)"/>
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestRemove" class="formButton" id="removeRequestBtn-@(Model.ID)"/>
        </div>
        <div class="tb-field desc-field">
            @Html.ListBox("workerRequests2", new SelectList(ViewBag.workerRequests, "Value", "Text"), new { id = "workerRequests2_WO-"+ Model.ID, tabindex = "29", style="min-width: 16em;"})
        </div>
    </div>
    -->
     <div class="tb-row desc-field">
        @Html.mUITableDescLabelFor(model => model.additionalNotes)
        <div class="tb-field">
            @Html.ValidationMessageFor(model => model.additionalNotes)
            @Html.TextAreaFor(model => model.additionalNotes, new { tabindex = "30", @class = "desc-field", id = idPrefix + "additionalNotes" })
        </div>
    </div>
</div><!--tb-table main workorder table-->

<div>
    <h3>@Machete.Web.Resources.WorkOrders.disclaimer</h3>
    @* This will always have a value that is set in the default values - it can be nullable in database, though, to support other types of WO *@
    @if (Model.disclosureAgreement.HasValue) 
    {
        @Html.CheckBoxFor(model => model.disclosureAgreement.Value, new { tabindex = "31"})
        @Html.Label(Machete.Web.Resources.WorkOrders.acknowledgement)
    }

    <!-- Display Disclaimer information - worker center specific -->
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Disclaimer_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Disclaimer_ES"])
    }
</div>

<div>
    <!-- Display Submission information - worker center specific -->
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Submission_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Submission_ES"])
    }
</div>

    <!-- TODO: make sure all error sections are set - consider moving these next to the fields that they apply to -->
    <div id="errorDialog">
        <h4>Errors</h4>
        <p>The following must be done to before submitting work order:</p>
        <p id="descriptionRequired" style="color:red">Work Description must be provided</p>
        <p id="disclaimerRequired" style="color:red">Disclaimer must be accepted</p>
        <p id="workersAssigned" style="color:red">Workers must be assigned</p>
    </div>

<!-- POP-UP MODALS -->
<!-- Display Request Workers pop-up - worker center specific -->
<!-- TODO: only enable the worker request feature IF the employer has hired in the past -->
<!-- Display Work Assignment pop-up - worker center specific -->
<div id="workAssignmentDialog-@(Model.ID)" title="@Machete.Web.Resources.WorkOrders.workAssignments" class="display" style="display: none">
    <table>
        <tr>
            <!-- Skill -->
            <td>
                @Html.Label(Machete.Domain.Resources.WorkAssignment.skillID)
            </td>
            <td>
                <!-- TODO: remove paperOrderNum model reference -->
                @Html.DropDownListFor(model => model.paperOrderNum,
                new SelectList(Lookups.getOnlineEmployerSkill(),
                    "Value",
                    "Text",
                    Model.paperOrderNum),
                             @Machete.Web.Resources.Shared.choose, new { tabindex = "40" })
            </td>
            <td width="10%">
                <p id="validateSkill"></p>
            </td>
            <!-- Skill Description - READ-ONLY -->
            <td>
                @Html.Label(Machete.Web.Resources.WorkAssignments.skillDescription)
            </td>
            <td>
                @Html.TextArea("SkillDescription", "", new { @readonly="readonly" })
            </td>
        </tr>
        <tr>
            <!-- Requested Hours -->
            <td>
                @Html.Label(Machete.Domain.Resources.WorkAssignment.hours)
            </td>
            <td>
                @Html.TextBox("RequestedHours", "", new { tabindex = "41" })
            </td>
            <td width="10%">
                <p id="validateHours"></p>
            </td>
            <!-- Minimum Hours - READ-ONLY -->
            <td>
                @Html.Label(Machete.Web.Resources.WorkAssignments.minHours)
            </td>
            <td>
                @Html.TextBox("MinimumHours", "", new { @readonly="readonly" })
            </td>
        </tr>
        <tr>
            <!-- Additional Description -->
            <td>
                @Html.Label(Machete.Web.Resources.WorkAssignments.additionalDescription)
            </td>
            <td>
                @Html.TextArea("AdditionalDescription")
            </td>
            <td width="20%">
                <p id="validateAdditionalDescription"></p>
            </td>
            <!-- Hourly Wage - READ-ONLY -->
            <td>
                @Html.Label(Machete.Domain.Resources.WorkAssignment.hourlyWage)
            </td>
            <td>
                @Html.TextBox("HourlyWage", "", new { @readonly="readonly" })
            </td>
        </tr>
    </table>
    @Html.Label(Machete.Domain.Resources.WorkAssignment.weightLifted)
    @Html.CheckBox("Weight")
    <br />
    <p></p>
    <input type="button" value="@Machete.Web.Resources.WorkOrders.createsubmit" class="formButton" id="addWorkerBtn-@(Model.ID)"/>
    <input type="button" value="@Machete.Web.Resources.WorkOrders.editcancel" class="formButton" id="removeWorkerBtn-@(Model.ID)"/>
    <div id="skillsErrorDialog">
        <h4>Errors</h4>
        <p id="skillsError" style="color:red"></p>
    </div>
</div>

<div id="workerDialog-@(Model.ID)" title="@Machete.Domain.Resources.WorkOrder.requestTitle">
    <table id="workerTable-@(Model.ID)" class="display" style="display: none">
        <thead>
            <tr>
                <th>EDITREF</th>
                <th>LABEL</th>
                <th>ID</th>
                <th>@Worker.dwccardnum</th>
                <th>@Person.firstname1</th>
            </tr>
        </thead>
    </table>
</div>

<!-- Display Business Hours pop-up - worker center specific -->
<div id="businessHoursDialog" title="@Machete.Web.Resources.WorkOrders.businessHoursModal" class="display" style="display: none">
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["BusinessHours_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["BusinessHours_ES"])
    }
</div>
<!-- Display Work Site address pop-up -->
<div id="workSiteAddress1Dialog" title="@Machete.Web.Resources.WorkOrders.workSiteAddress1" class="display" style="display: none">
    <p>@Machete.Web.Resources.WorkOrders.workSiteAddress1Dialog</p>
</div>
<!-- Display Employer address pop-up -->
<div id="employerAddress1Dialog" title="@Machete.Domain.Resources.Employer.address1" class="display" style="display: none">
    <p>@Machete.Web.Resources.Employers.employerAddress1Dialog</p>
</div>
<!-- Display Weight Lift Requirement pop-up - worker center specific -->
<div id="weightLiftedDialog" title="@Machete.Web.Resources.WorkOrders.weightRequirements" class="display" style="display: none">
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["WeightLifted_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["WeightLifted_ES"])
    }
</div>
<!-- Display Transportation Method pop-up - worker center specific -->
<div id="transportationMethodDialog" title="@Machete.Domain.Resources.WorkOrder.transportMethodID" class="display" style="display: none">
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["TransportationMethod_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["TransportationMethod_ES"])
    }
</div>
<!-- Display Work Description pop-up -->
<div id="workDescriptionDialog" title="@Machete.Domain.Resources.WorkOrder.description" class="display" style="display: none">
    <p>@Machete.Web.Resources.WorkOrders.workDescription</p>
</div>
<!-- Display Contact Name pop-up -->
<div id="contactNameDialog" title="@Machete.Domain.Resources.WorkOrder.contactName" class="display" style="display: none">
    <p>@Machete.Web.Resources.WorkOrders.contactName</p>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        
        // TODO: remove
        //alert("Testing JQuery");
        var lSkillID = [ @(string.Join(", ", (int[])ViewBag.ID)) ];
        var lMinHour = [ @(string.Join(", ", (int[])ViewBag.minHour)) ];
        var lWorkType = [ @(string.Join(", ", (int[])ViewBag.workType)) ];
        var lWage = [ @(string.Join(", ", (double[])ViewBag.wage)) ];
        var lDescES = [ @(string.Join(", ", (string[])ViewBag.desc_ES)) ];
        var lDescEN = [ @(string.Join(", ", (string[])ViewBag.desc_EN)) ];

        var workAssignments = {assignments: [], requests: [] };

        $("#futureTime").hide();
        $("#earliestTime").hide();
        $("#invalidDate").hide();
        $("#@(idPrefix)SaveBtn").hide();
        $("#removeWABtn-0").hide();
        
        // TODO: Need to check if bus is a valid transport method to select zipcode - else change to pick up worker

        // http://trentrichardson.com/examples/timepicker/
        $("#@(idPrefix)dateTimeofWork").datetimepicker({
            stepMinute: 15,
            ampm: false,
            hourMin: 7,
            hourMax: 23,
            minuteMin: 0,
            minuteMax: 45,
            minuteGrid: 15,
            hourGrid: 4
        });

        $('#workerTable-@(Model.ID)').dataTable({
            "bPaginate": true,
            "bLengthChange": true,
            "aaSorting": [[9, 'desc']],
            "bFilter": true,
            "bSort": true,
            "bInfo": true,
            "iDeferLoading": true,
            "bAutoWidth": false,
            "bServerSide": true,
            "sAjaxSource": "/Worker/AjaxHandler", 
            "oLanguage": datatable_lang_@(CI.TwoLetterISOLanguageName),
            "bProcessing": true,
            "aoColumns": [
                { "mDataProp": "tabref","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "tablabel","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "WID","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "dwccardnum" },
                { "mDataProp": "firstname1" }
            ],
            // callback populates html attr with row data from JSON            
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                $(nRow).attr('recordid', aData['WID']);
                //$(nRow).attr('edittablabel', aData[1]);                
                return nRow;
            }         
        }).fnSetFilteringDelay(250);

        // Toggle English required note box
        $('#@(idPrefix)englishRequired').mUI('selectToggleOnValue', {
            target: $('#@(idPrefix)englishRequiredNoteRow'),
            showVal: "@(Shared.yes)"
        });

        // ReferredBy Other toggle
        $('#@(idPrefix)referredby').mUI('selectToggleOnValue', {
            target: $('#@(idPrefix)referredbyOtherRow'),
            showVal: "Other"
        });

        //////////////////////////////////////////////////////////////////////////
        // POP-UP MODALS
        //////////////////////////////////////////////////////////////////////////
        $('#addWABtn-@(Model.ID)').click(function () {
            $("#skillsErrorDialog").hide();

            $('#workAssignmentDialog-@(Model.ID)').dialog({
                height: 440,
                width: 1000,
                modal: true
            });

            $('#workAssignmentDialog-@(Model.ID)').show();
        });

        $('#transportationMethodModal').click(function () {

            $("#transportationMethodDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#transportationMethodDialog').show();
        });

        $('#contactNameModal').click(function () {

            $("#contactNameDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#contactNameDialog').show();
        });

        $('#workDescriptionModal').click(function () {

            $("#workDescriptionDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#workDescriptionDialog').show();
        });

        $('#workSiteAddress1Modal').click(function () {

            $("#workSiteAddress1Dialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#workSiteAddress1Dialog').show();
        });

        $('#weightLiftedModal').click(function () {

            $("#weightLiftedDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#weightLiftedDialog').show();
        });

        $('#businessHoursModal').click(function () {

            $("#businessHoursDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#businessHoursDialog').show();
        });

        $('#businessHoursModal2').click(function () {

            $("#businessHoursDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#businessHoursDialog').show();
        });

        $('#employerAddress1Modal').click(function () {
            $("#employerAddress1Dialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#employerAddress1Dialog').show();
        });

        //////////////////////////////////////////////////////////////////////////
        // HELPER FUNCTIONS
        //////////////////////////////////////////////////////////////////////////
        function checkDate() {

            var userInput = $("#@(idPrefix)dateTimeofWork").val();
            var userInputInMs = new Date(userInput);

            /*
            http://stackoverflow.com/questions/5619202/converting-string-to-date-in-js
            Date.parse almost gets you what you want. It chokes on the am/pm part, but with some hacking you can get it to work:

            var str = 'Sun Apr 25, 2010 3:30pm',
                timestamp;

            timestamp = Date.parse(str.replace(/[ap]m$/i, ''));

            if(str.match(/pm$/i) >= 0) {
                timestamp += 12 * 60 * 60 * 1000;
            }
            */

            if (isNaN(userInputInMs.valueOf())) {
                $("#invalidDate").text("The date must be in a valid date form (e.g. 03/14/2015 14:00)").show();
                return;
            } else {
                $("#invalidDate").hide();
            }

            var dayOfWeek = userInputInMs.getDay();
            console.log("The day of week is: " + dayOfWeek);
            var hourOfDay = userInputInMs.getHours();
            console.log("The hour of day is: " + hourOfDay);

            // Set up Day of Week Conversion
            var weekday = new Array(7);
            weekday[0]=  "Sunday";
            weekday[1] = "Monday";
            weekday[2] = "Tuesday";
            weekday[3] = "Wednesday";
            weekday[4] = "Thursday";
            weekday[5] = "Friday";
            weekday[6] = "Saturday";

            var advanceHours;
            var earliestHour;
            var latestHour;

            if (dayOfWeek == 0) { // Sunday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursSunday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursSunday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursSunday"]);
            } else if (dayOfWeek == 1) { // Monday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursMonday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursMonday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursMonday"]);
            } else if (dayOfWeek == 2) { // Tuesday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursTuesday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursTuesday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursTuesday"]);
            } else if (dayOfWeek == 3) { // Wednesday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursWednesday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursWednesday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursWednesday"]);
            } else if (dayOfWeek == 4) { // Thursday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursThursday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursThursday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursThursday"]);
            } else if (dayOfWeek == 5) { // Friday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursFriday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursFriday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursFriday"]);
            } else if (dayOfWeek == 6) { // Saturday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursSaturday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursSaturday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursSaturday"]);
            }

            if (isNaN(advanceHours)) { // In case valid value not set in configuration file, set default
                advanceHours = 36;
            }

            var future = Date.now() + (advanceHours * 60 * 60 * 1000);
             
            // Confirm that enough advance hours have been provided
            if(userInputInMs >= future) {
                $("#futureTime").hide();
            } else {
                $("#futureTime").text("Date must be at least " + advanceHours + " hours from now to place an order on " + weekday[dayOfWeek]).show();
            }

            // Confirm that earliest time of day is valid
            if (hourOfDay < earliestHour) {
                $("#earliestTime").text("Time must start after " + earliestHour + " O'Clock on " + weekday[dayOfWeek]).show();
            } else {
                $("#earliestTime").hide();
            }

            // Confirm that earliest time of day is valid
            if (hourOfDay > latestHour) {
                $("#latestTime").text("Time must start after " + latestHour + " O'Clock on " + weekday[dayOfWeek]).show();
            } else {
                $("#latestTime").hide();
            }
        };

        function validateZipcodes() {
            // Check that required fields are set
            if (($("#@(idPrefix)transportMethodID").val() == "") || ($("#@(idPrefix)zipcode"))) {
                console.log("empty string");
                return;
            }

            var allowableZipcode = true;
            var transportMethod = $("#@(idPrefix)transportMethodID").val();

            // TODO: Ensure that all lookup tables have the same values here
            if (transportMethod == 26) { // Worker buses = 26
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusInsideZone"];
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusOutsideZone"];

                if (insideZipCodes == "" || outsideZipCodes == "") {
                    $("#invalidZipcode").hide();
                    return;
                }

                if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes within zone
                    allowableZipcode = true;
                } else if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes outside zone
                    allowableZipcode = true;
                } else {
                    allowableZipcode = false;
                }

            } else if (transportMethod == 29) { // Van service = 29
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanInsideZone"];
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanOutsideZone"];

                if (insideZipCodes == "" || outsideZipCodes == "") {
                    $("#invalidZipcode").hide();
                    return;
                }

                if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes within zone
                    allowableZipcode = true;
                } else if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes outside zone
                    allowableZipcode = true;
                } else {
                    allowableZipcode = false;
                }
            }

            if (!allowableZipcode) {
                $("#invalidZipcode").text("This zipcode is not a valid zipcode that we provide service to").show();
            } else {
                $("#invalidZipcode").hide();
            }
        }

        function setDefaultTransportationMethod() {

            var zipcode = $("#@(idPrefix)zipcode").val();

            // Check that required fields are set
            if ((transportMethod == "") || (zipcode == "")) {
                return;
            }

            var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusInsideZone"];
            var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusOutsideZone"];
            if (insideZipCodes != "" && outsideZipCodes != "") {
                // If zipcode not serviceable by bus - set default to pick up
                if (insideZipCodes.indexOf(parseInt(zipcode)) == -1 && outsideZipCodes.indexOf(parseInt(zipcode)) == -1) {
                    var transportMethod = $("#@(idPrefix)transportMethodID").val(28);
                } 
            }
        }

        function calculateTransportationFees() {
            console.log("Calculating transport fees");
            // Count number of workers
            var numWorkers = workAssignments.assignments.length;

            var transportMethod = $("#@(idPrefix)transportMethodID").val();
            var zipcode = $("#@(idPrefix)zipcode").val();

            // Check that required fields are set
            if ((transportMethod == "") || (zipcode == "")) {
                return;
            }

            var transportFee;
            var isTransportFeeSet = false;

            // TODO: Ensure that all lookup tables have the same values here
            if (transportMethod == 26) { // Worker buses = 26
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusInsideZone"];
                if (insideZipCodes != "") {
                    if (insideZipCodes.indexOf(parseInt(zipcode)) != -1) {
                        // Zipcode is in the allowable list of zipcodes within zone
                        transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportBusInsideZoneCost"];
                        if (transportFee != "") {
                            isTransportFeeSet = true;
                        }
                    } 
                }
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusOutsideZone"];
                if (outsideZipCodes != "") {
                    console.log(outsideZipCodes);
                    if (outsideZipCodes.indexOf(parseInt(zipcode)) != -1) {
                        // Zipcode is in the allowable list of zipcodes outside zone
                        transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportBusOutsideZoneCost"];
                        if (transportFee != "") {
                            isTransportFeeSet = true;
                        }
                    }
                }

            } else if (transportMethod == 29) { // Van service = 29
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanInsideZone"];
                if (insideZipCodes != "") {
                    if (insideZipCodes.indexOf(parseInt(zipcode)) != -1) {
                        // Zipcode is in the allowable list of zipcodes within zone
                        if (numWorkers < 1) {
                            // Note: defaulting the bus cost for just one worker before any workers are assigned & only changing value if more than one worker is assigned
                            transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportVanInsideZoneCostOneWorker"];
                            if (transportFee != "") {
                                isTransportFeeSet = true;
                            }
                        } else if (numWorkers > 1) {
                            transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportVanInsideZoneCostMultipleWorkers"];
                            if (transportFee != "") {
                                isTransportFeeSet = true;
                            }
                        }
                    }
                } 
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanOutsideZone"];
                if (outsideZipCodes != "") {
                    if (outsideZipCodes.indexOf(parseInt(zipcode)) != -1) {
                        // Zipcode is in the allowable list of zipcodes outside zone
                        transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportVanOutsideZoneCost"];
                        if (transportFee != "") {
                            isTransportFeeSet = true;
                        }
                    }
                }
            }

            if (isTransportFeeSet) {
                $("#transportationFees").text("$" + transportFee.toFixed(2));
                $("#transportFee").val(transportFee.toFixed(2));
                $("#paypalWarning").show();
            } else {
                $("#transportationFees").text("n/a");
                $("#paypalWarning").hide();
                $("#transportFee").val(0);
            }

        };

        // Set up defaults
        // Note: Upon document load, calculate transport fees based on the users zipcode & the default bus selection
        setDefaultTransportationMethod();
        calculateTransportationFees(); 
        clearDropDownList();

        function checkTransportationMethodDate() {
            if ($("#@(idPrefix)transportMethodID").val() == "") {
                return;
            }

            // Note: this is logic that is specific to Casa Latina only
            var workerCenter = "" + $("#workerCenter").val() + "";
            if (workerCenter != "Casa Latina") {
                $("#invalidTransportDate").hide();
                return;
            }

            var userInput = $("#@(idPrefix)dateTimeofWork").val();
            var userInputInMs = new Date(userInput);

            if (isNaN(userInputInMs.valueOf())) {
                $("#invalidDate").text("The date must be in a valid date form (e.g. 03/14/2015 14:00)").show();
                return;
            } else {
                $("#invalidDate").hide();
            }

            var dayOfWeek = userInputInMs.getDay();
            var transportMethod = $("#@(idPrefix)transportMethodID").val();

            if (dayOfWeek == 0) { // Sunday
                // Note: only valid transportation method on Sunday is Pickup
                // TODO: this value is hard-coded, should be replaced
                if ((transportMethod == 26) || (transportMethod == 29)) { // Worker buses = 26
                    $("#invalidTransportDate").text("Workers can only be picked up for work on Sunday").show();
                } else {
                    $("#invalidTransportDate").hide();
                }
            }

        };

        function clearDropDownList() {
            // There are more transport methods available than should be visible to employer 
            // Remove everything except for Bus(26), Van(29), & Pickup(28)
            var transportMethods = document.getElementById('WO0-transportMethodID')

            for (var i = 0; i < transportMethods.length; i++)
            {
                // TODO: these values are hard-coded - make sure all worker centers have these values
                if ((transportMethods.options[i].value != "26") &&
                    (transportMethods.options[i].value != "29") &&
                    (transportMethods.options[i].value != "28") )
                {
                    transportMethods.remove(i);
                }
            }
        }

        //////////////////////////////////////////////////////////////////////////
        // VALIDATION
        //////////////////////////////////////////////////////////////////////////
        function enableButton() {
            console.log("Checking validity");
    
            // Count number of workers
            var numWorkers = workAssignments.assignments.length;
            if ($("#futureTime").is(":visible") == true) {
                console.log("Future time is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if ($("#earliestTime").is(":visible") == true) {
                console.log("Earliest time is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if ($("#invalidDate").is(":visible") == true) {
                console.log("Date is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if ($("#descriptionRequired").is(":visible") == true) {
                console.log("Description is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if ($("#disclaimerRequired").is(":visible") == true) {
                console.log("Disclaimer is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if ($("#workersAssigned").is(":visible") == true) {
                console.log("Workers assigned is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if ($("#errorDialog").is(":visible") == true) {
                console.log("Error dialog is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else if (numWorkers < 1) {
                console.log("Number of workers is invalid");
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else {
                $("#descriptionRequired").hide();
                $("#disclaimerRequired").hide();
                $("#workersAssigned").hide();
                $("#errorDialog").hide();

                // Enable button
                $("#@(idPrefix)SaveBtn").show();
            }
        };

        function disableErrors() {
            if (($("#descriptionRequired").is(":visible") != true) &&
                ($("#disclaimerRequired").is(":visible") != true) &&
                ($("#workersAssigned").is(":visible") != true) )
            {
                // Hide error dialog
                $("#errorDialog").hide();
            }
            else
            {
                // Show error dialog
                $("#errorDialog").show();
            }
            
            enableButton();
        }

        $("#disclosureAgreement_Value").change(function() {
            console.log("Disclosure agreement changed");
            
            // Disclosure agreement is set
            if (document.getElementById("disclosureAgreement_Value"))
            {
                // Disable error
                $("#disclaimerRequired").hide();

                // Check if other errors exist - hide section if none exist
                disableErrors();
            }
            else
            {
                // Enable error
                $("#disclaimerRequired").show();
                $("#errorDialog").show();
            }
        });

        $("#@(idPrefix)description").change(function() {
            // Check required field
            if ($("#@(idPrefix)description").val() == "") {
                var field = $("#@(idPrefix)description").parent().prev().text();
                $("#requiredFieldWorkDescription").text("REQUIRED FIELD: ").append(field).show();
                $("#descriptionRequired").show();
                $("#errorDialog").show();
            } else {
                $("#requiredFieldWorkDescription").hide();
                $("#descriptionRequired").hide();

                // Check if other errors exist - hide section if none exist
                disableErrors();
            }

            // Enable Submit button if valid
            enableButton();
        });
        
        $("#@(idPrefix)city").focusout(function() {
            // Check required field
            if ($("#@(idPrefix)city").val() == "") {
                var field = $("#@(idPrefix)city").parent().prev().text();
                $("#requiredFieldCity").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldCity").hide();
            }

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)transportMethodID").change(function() {

            // Calculate Transport fees
            calculateTransportationFees();

            // Confirm transportation method is valid with date
            checkTransportationMethodDate();

            // Check required field
            if ($("#@(idPrefix)transportMethodID").val() == "") {
                var field = $("#@(idPrefix)transportMethodID").parent().prev().text();
                $("#requiredFieldTransportMethod").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldTransportMethod").hide();
            }

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)workSiteAddress1").focusout(function() {
            // Check required field
            if ($("#@(idPrefix)workSiteAddress1").val() == "") {
                var field = $("#@(idPrefix)workSiteAddress1").parent().prev().text();
                $("#requiredFieldWorkSiteAddress1").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldWorkSiteAddress1").hide();
            }

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)dateTimeofWork").change(function() {
            console.log("triggered change event");
            // Confirm date is valid
            checkDate();

            // Confirm transportation method is valid with date
            checkTransportationMethodDate();

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)state").focusout(function() {
            // Check required field
            var field = $("#@(idPrefix)state").parent().prev().text();
            if ($("#@(idPrefix)state").val() == "") {
                $("#requiredFieldState").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldState").hide();

                // Validate that there are two letters
                var regEx = /[A-Za-z]{2}/;
                var isValid = regEx.exec($("#@(idPrefix)state").val());
                if (isValid)
                {
                    // Hide error text
                    $("#invalidFormatState").hide();
                    $("#@(idPrefix)state").val($("#@(idPrefix)state").val().toUpperCase())
                    console.log("Valid state");
                }
                else
                {
                    // Enable error text
                    $("#invalidFormatState").text("INVALID FORMAT: ").append(field).append(" - Must have exactly two letters").show();
                    console.log("Invalid state");
                }
            }

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)contactName").focusout(function() {
            // Check required field
            var field = $("#@(idPrefix)contactName").parent().prev().text();
            if ($("#@(idPrefix)contactName").val() == "") {
                $("#requiredFieldName").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldName").hide();
            }

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)phone").focusout(function() {
            // Check required field
            var field = $("#@(idPrefix)phone").parent().prev().text();
            if ($("#@(idPrefix)phone").val() == "") {
                $("#requiredFieldPhone").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldPhone").hide();
            }

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)zipcode").focusout(function() {

            // Validate zipcode
            validateZipcodes();

            // Check required field
            var field = $("#@(idPrefix)zipcode").parent().prev().text();
            if ($("#@(idPrefix)zipcode").val() == "") {
                $("#requiredFieldZipcode").text("REQUIRED FIELD: ").append(field).show();
            } else {
                $("#requiredFieldZipcode").hide();

                // Validate that there are five numbers
                //var regEx = /(\d{5})(^[0-9\w])/;
                //var regEx = /\d{5}|(\d{5})([-])(\d{4})/;
                var regEx = /\d{5}/;
                var isValid = regEx.exec($("#@(idPrefix)zipcode").val());
                if (isValid)
                {
                    // Hide error text
                    $("#invalidFormatZipcode").hide();
                    console.log("Valid zipcode");
                }
                else
                {
                    // Enable error text
                    $("#invalidFormatZipcode").text("INVALID FORMAT: ").append(field).append(" - Must have exactly five numbers").show();
                    console.log("Invalid zipcode");
                }
            }

            // Calculate transportation fee
            calculateTransportationFees();

            // Enable Submit button if valid
            enableButton();
        });

        //////////////////////////////////////////////////////////////////////////
        // WORKER REQUESTS
        //////////////////////////////////////////////////////////////////////////
        // workRequest Dialog -doubleclick on row to select
        // create event to handle worker selection from dialog
        $('#workerTable-@(Model.ID)').find('tbody').dblclick(function (event) {            
            var myTr = event.target.parentNode;
            var myID = $(myTr).attr('recordid');  
            var myLabel =  $(myTr).find('td:eq(0)').text() + ' '+
                                              $(myTr).find('td:eq(2)').text() + ' '+
                                              $(myTr).find('td:eq(4)').text();
            // handler function created by addRequestionBtn create event
            //M_workerRequestHandler_@(Model.ID)(myID, myLabel);
            $('#workerRequests2_WO-@(Model.ID)').append(
                  $('<option></option>').val(myID).html(myLabel)                
              );
            $('a.ui-dialog-titlebar-close').click();
        });

        $('#workerDialog-@(Model.ID)').hide();
        $('#workerTable-@(Model.ID)').hide();

        $('#addRequestBtn-@(Model.ID)').click(function () {
            $('#workerTable-@(Model.ID)').dataTable().fnDraw();
            $('#workerTable-@(Model.ID)').show();
            //
            //Anon function to handle doubleclick of record selector
            //M_workerRequestHandler_@(Model.ID) = function (myID, myLabel){
            //    $('#workerRequests2_WO-@(Model.ID)').append(
            //        $('<option></option>').val(myID).html(myLabel)                
            //    );
            //}
            $("#workerDialog-@(Model.ID)").dialog({
                height: 340,
                width: 1000,
                modal: true
            });
            
            $('#workerDialog-@(Model.ID)').show();
        });

        $('#removeRequestBtn-@(Model.ID)').click(function () {
            $('#workerRequests2_WO-@(Model.ID)').find('option:selected').remove();
        });

        $('#removeWABtn-@(Model.ID)').click(function () {

            // Remove from Work Assignments list
            var selected = $('#workAssignments_WO-@(Model.ID)').find('option:selected');
            if (!selected)
            {
                return;
            }
            var val = selected.val();
            console.log(workAssignments);
            for (var i = 0; i < workAssignments.assignments.length; i++)
            {
                if (workAssignments.assignments[i].listId == val)
                {
                    workAssignments.assignments.splice(i, 1);
                }
            }
            console.log(workAssignments);

            $('#workAssignments_WO-@(Model.ID)').find('option:selected').remove();
            
            // Validate workers assigned
            checkWorkersAssigned();

            // Disable remove button
            $("#removeWABtn-0").hide();

            // Trigger cost estimates
            CalculateWorkerFees();

            // Trigger transportation fees
            calculateTransportationFees();

        });

        $('#workAssignments_WO-@(Model.ID)').change(function () {
            var selected = $('#workAssignments_WO-@(Model.ID)').find('option:selected')
            if (!selected) {
                // Disable remove button
                $("#removeWABtn-0").hide();
            }
            else
            {
                // Enable remove button
                $("#removeWABtn-0").show();
            }
        });

        function checkWorkersAssigned() {
            // Workers are assigned
            if (workAssignments.assignments.length > 0)
            {
                // Disable error
                $("#workersAssigned").hide();

                // Check if other errors exist - hide section if none exist
                disableErrors();

            }
            else
            {
                // Enable error
                $("#workersAssigned").show();
                $("#errorDialog").show();

            }

            // Enable Submit button if valid
            enableButton();
        }

        function CalculateWorkerFees() {
            var totalWorkerRates = 0;
            var workerCenter = "" + $("#workerCenter").val() + "";
            console.log(workerCenter);

            for (var i = 0; i < workAssignments.assignments.length; i++)
            {
                // Note: this is logic that is specific to Casa Latina only
                if (workerCenter == "Casa Latina") {
                    if (workAssignments.assignments[i].skillId == "64")
                    {
                        // TODO: fix this hard-coded value. This represents the fact that type of work 
                        $("#typeOfWorkID").val(19); // worktype = Domestic Workers Program (19)
                        // TODO: fix this hard-coded values. These represents Casa's scale of hiring HHH workers at $65 for first
                        // 3 hours & an additional $16/hr afterwards
                        if (workAssignments.assignments[i].hours <= 3)
                        {
                            totalWorkerRates += 65;
                        }
                        else
                        {
                            totalWorkerRates += 65 + (workAssignments.assignments[i].hours * 16);
                        }
                    }               
                    else
                    {
                        // TODO: fix this hard-coded value. This represents the fact that type of work 
                        $("#typeOfWorkID").val(18); // worktype = Day Worker Center (18)
                        totalWorkerRates += workAssignments.assignments[i].hours * workAssignments.assignments[i].hourlyWage; 
                    } 
                }
                else
                {
                    totalWorkerRates += workAssignments.assignments[i].hours * workAssignments.assignments[i].hourlyWage; 
                }
            }

            if (totalWorkerRates > 0)
            {
                $("#estimatedCosts").text("$" + totalWorkerRates.toFixed(2));
            } else {
                $("#estimatedCosts").text("TBD");
            }
        };

        $('#RequestedHours').focusout(function() {
            validateSkill();
        });

        $('#paperOrderNum').change(function() {
            validateSkill();
            var skillsSelect = document.getElementById("paperOrderNum");
            var selectedId = skillsSelect.options[skillsSelect.selectedIndex].value;
            for (var i = 0; i < lSkillID.length; i++)
            {
                if (selectedId == lSkillID[i])
                {
                    // TODO: check culture setting & return the correct language
                    $("#SkillDescription").val(lDescEN[i]);
                    $("#MinimumHours").val(lMinHour[i]);
                    $("#HourlyWage").val(lWage[i]);
                    break;
                }
            }
        });

        function validateSkill() {
            console.log("Validating skill");
            var hasError = false;

            // if selected -- choose or not selected
            var skillsSelect = document.getElementById("paperOrderNum");
            var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
            if (selectedText == "(choose)" || selectedText == "") {
                // Enable error text
                $("#skillsError").text("Must select skill from drop-down list");
                $("#skillsErrorDialog").show();
                console.log("Must select an option");
                hasError = true;
            }

            // if hours < 0 or not a number
            if (isNaN($('#RequestedHours').val()) || ($('#RequestedHours').val() == "")) {
                $("#skillsError").text("Must select number of hours");
                $("#skillsErrorDialog").show();
                console.log("Invalid number");
                hasError = true;
            } else {
                var requestedHours = parseInt($('#RequestedHours').val());
                var minimumHours = parseInt($('#MinimumHours').val());
                if (requestedHours < minimumHours) {
                    console.log("Too few hours were selected for this skill");
                    hasError = true;
                    $("#skillsError").text("Must select number of hours more than minimum required for this skill: ").append($('#MinimumHours').val());
                    $("#skillsErrorDialog").show();
                }

                if (requestedHours > 8) {
                    console.log("Too many hours were selected for this skill");
                    hasError = true;
                    $("#skillsError").text("Must select number of hours less than 8");
                    $("#skillsErrorDialog").show();
                }
            }

            if (!hasError) {
                $("#skillsErrorDialog").hide();
            }

            return !hasError;
        }

        //////////////////////////////////////////////////////////////////////////
        // WORK ASSIGNMENTS
        //////////////////////////////////////////////////////////////////////////
        $('#removeWorkerBtn-@(Model.ID)').click(function () {
            $('a.ui-dialog-titlebar-close').click();
        });

        var waCounter = 1;

        $('#addWorkerBtn-@(Model.ID)').click(function () {

            if (validateSkill()) {

                // TODO: extract skill title & # hours

                var skillsSelect = document.getElementById("paperOrderNum");
                var selectedText = skillsSelect.options[skillsSelect.selectedIndex].text;
                var hourlyWage = $('#HourlyWage').val();
                var hours = $('#RequestedHours').val();

                var option = $('<option></option>').val(waCounter++).html(selectedText).append(" - ").append(hours).append(" hour(s) @@ $").append(parseInt(hourlyWage).toFixed(2)).append("/hour"); 
                console.log(option);
                $('#workAssignments_WO-@(Model.ID)').append(option);

                var wa = {};
                wa.listId = waCounter - 1;
                // TODO: remove reference to paperOrderNum
                wa.skillId = $('#paperOrderNum').val();
                wa.hours = $('#RequestedHours').val();
                wa.desc = $('#AdditionalDescription').val();
                wa.weight = $('#Weight').val();
                wa.skillDesc = $('#SkillDescription').val();
                wa.minHours = $('#MinimumHours').val();
                wa.hourlyWage = hourlyWage;

                workAssignments['assignments'].push(wa);
                $('#workerAssignments').val(JSON.stringify(workAssignments));

                console.log(JSON.stringify(workAssignments));

                // Validate workers assigned
                checkWorkersAssigned();

                // Trigger cost estimates
                CalculateWorkerFees();

                // Trigger transportation fees
                calculateTransportationFees();

                $('a.ui-dialog-titlebar-close').click();
            }
        });

    });
</script>