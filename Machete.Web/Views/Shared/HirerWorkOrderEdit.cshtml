@model Machete.Domain.WorkOrder
@using Machete.Web.Helpers
@using Machete.Web.Resources
@using Machete.Domain.Resources
@{
    System.Globalization.CultureInfo CI = (System.Globalization.CultureInfo)Session["Culture"];
    string recType = "WO";
    string idPrefix = recType + Model.ID + "-";
}
@Html.HiddenFor(model => model.ID, new { @class = "hiddenRecID" })
@Html.HiddenFor(model => model.EmployerID, new { @id = idPrefix + "EmployerID" })
@Html.HiddenFor(model => model.onlineSource)
@Html.HiddenFor(model => model.status)
@Html.HiddenFor(model => model.typeOfWorkID)
@Html.HiddenFor(model => model.timeFlexible)
@* Need to figure out how waPseudoIDCounter is used in the WO - should probably be set *@
@* Need to add typeOfWorkID based on Skill *@


<input type="hidden" name="workerAssignments" id="workerAssignments" value="">

<!-- MAIN WORK ORDER FORM -->
<div>
    <!-- Display Header information - worker center specific -->
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["CreateWOHeader_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["CreateWOHeader_ES"])
    }
</div>
<!-- TODO: Remove console.log statements -->
<!-- TODO: Share error messages (.text) with Sierra -->

<div class="tb-table">
    <div id="estimatedCosts">
        <h3>Estimated Costs:</h3>
        <p>Worker Rates:</p>
        <p id="workerRates">TBD</p>
        <div id="transportationFeesHeader">
        <p>Transportation Fees:</p>
        <p id="transportationFees"></p>
        <p>Transportation fees must be paid via PayPal to complete order</p>
        <!-- TODO: insert paypal button -->
        </div>
    </div>
    <!-- Form errors -->
    <!-- TODO: make sure all error sections are set - consider moving these next to the fields that they apply to -->
    <div id="messageDialog">
        <p id="futureTime"></p>
        <p id="earliestTime"></p>
        <p id="latestTime"></p>
        <p id="invalidDate"></p>
        <p id="invalidZipcode"></p>
        <p id="invalidTransportDate"></p>
        <p id="requiredFieldWorkSiteAddress1"></p>
        <p id="requiredFieldCity"></p>
        <p id="requiredFieldState"></p>
        <p id="requiredFieldZipcode"></p>
        <p id="requiredFieldTransportMethod"></p>
        <p id="requiredFieldWorkDescription"></p>
    </div>

    <h3>@Machete.Web.Resources.WorkOrders.workRequest</h3>
    <div class="tb-row">
        @Html.Label(Machete.Web.Resources.WorkOrders.timeNeeded)
        @Html.mUITableTextBoxFor(model => model.dateTimeofWork, new { tabindex = "1", id = idPrefix + "dateTimeofWork" })
    </div>
    <div class="tb-row">
        <div class="tb-label desc-label">
            @Html.Label(Machete.Web.Resources.WorkOrders.workAssignments)
            <br />
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestAdd" class="formButton" id="addWABtn-@(Model.ID)"/>
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestRemove" class="formButton" id="removeWABtn-@(Model.ID)"/>
        </div>
        <div class="tb-field desc-field">
            @Html.ListBox("workAssignments", new SelectList(ViewBag.workAssignments, "Value", "Text"), new { id = "workAssignments_WO-"+ Model.ID, tabindex = "2", style="min-width: 16em;"})
        </div>
    </div>
    <div class="tb-row">
        <a href="#" id="workSiteAddress1Modal">@Html.Label(Machete.Web.Resources.WorkOrders.workSiteAddress1)</a>
        <div class="tb-field">
            @Html.mUITableTextBoxFor(model => model.workSiteAddress1, new { tabindex = "3", id = idPrefix + "workSiteAddress1" })
        </div>
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.workSiteAddress2, new { tabindex = "4", id = idPrefix + "workSiteAddress2" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.city, new { tabindex = "5", id = idPrefix + "city" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.state, new { tabindex = "6", id = idPrefix + "state" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.zipcode, new { tabindex = "7", id = idPrefix + "zipcode" })
    </div>
    <div class="tb-row">
        <a href="#" id="transportationMethodModal">@Html.mUITableLabelFor(model => model.transportMethodID)</a>
        @Html.mUIDropDownListFor(model => model.transportMethodID,
                        new SelectList(Lookups.getSelectList(Machete.Domain.LCategory.transportmethod), "Value", "Text", Model.transportMethodID),
                        new { tabindex = "8", id = idPrefix + "transportMethodID" })
    </div>
    <!-- TODO: The only acceptable online payment is paypal - there needs to be a note to Employers here -->
    <!-- TODO: set transportTransactType=PayPal if transportMethod = Bus || Van -->
    <div class="tb-row desc-field">
        <a href="#" id="workDescriptionModal">@Html.mUITableDescLabelFor(model => model.description)</a>
        <div class="tb-field">
            @Html.ValidationMessageFor(model => model.description)
            @Html.TextAreaFor(model => model.description, new { tabindex = "9", @class = "desc-field", id = idPrefix + "description" })
        </div>
    </div>
</div><!--tb-table main workorder table-->


<div class="tb-table">
    <h3>@Machete.Web.Resources.WorkOrders.workDetails</h3>
    
    <div class="tb-row">
        <a href="#" id="contactNameModal">@Html.Label(Machete.Web.Resources.WorkOrders.contactNameWorkSite)</a>
        @Html.mUITableTextBoxFor(model => model.contactName, new { tabindex = "25", id = idPrefix + "contactName" })
    </div>
    <div class="tb-row">
        @Html.Label(Machete.Domain.Resources.WorkOrder.phoneWorkSite)
        @Html.mUITableTextBoxFor(model => model.phone, new { tabindex = "26", id = idPrefix + "phone" })
    </div>
    <div class="tb-row">
        <div class="tb-label englishRequired_@(Model.ID)">
            @Html.LabelFor(model => model.englishRequired)
        </div>
        <div class="tb-field englishRequired_@(Model.ID)">
            @Html.mUIDropDownYesNoFor(model => model.englishRequired, new { tabindex = "27", id = idPrefix + "englishRequired" })
        </div>
    </div>
    <!-- Note: Field only appears in table when englishRequired = TRUE -->
    <div class="tb-row englishNoteRow" id="@(idPrefix)englishRequiredNoteRow">
        @Html.mUITableDescLabelFor(model => model.englishRequiredNote)
        <div class="tb-field">
            @Html.TextAreaFor(model => model.englishRequiredNote, new { tabindex = "28", @class = "desc-field", id = idPrefix + "englishRequiredNote" })
            @Html.ValidationMessageFor(model => model.englishRequiredNote)
        </div>
    </div>
    <div class="tb-row">
        <div class="tb-label desc-label">
            @Html.Label(Machete.Web.Resources.WorkOrders.workersRequested)
            <br />
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestAdd" class="formButton" id="addRequestBtn-@(Model.ID)"/>
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestRemove" class="formButton" id="removeRequestBtn-@(Model.ID)"/>
        </div>
        <div class="tb-field desc-field">
            @Html.ListBox("workerRequests2", new SelectList(ViewBag.workerRequests, "Value", "Text"), new { id = "workerRequests2_WO-"+ Model.ID, tabindex = "29", style="min-width: 16em;"})
        </div>
    </div>
     <div class="tb-row desc-field">
        @Html.mUITableDescLabelFor(model => model.additionalNotes)
        <div class="tb-field">
            @Html.ValidationMessageFor(model => model.additionalNotes)
            @Html.TextAreaFor(model => model.additionalNotes, new { tabindex = "30", @class = "desc-field", id = idPrefix + "additionalNotes" })
        </div>
    </div>
</div><!--tb-table main workorder table-->

<div>
    <h3>@Machete.Web.Resources.WorkOrders.disclaimer</h3>
    @* This will always have a value that is set in the default values - it can be nullable in database, though, to support other types of WO *@
    @if (Model.disclosureAgreement.HasValue) 
    {
        @Html.CheckBoxFor(model => model.disclosureAgreement.Value)
        @Html.Label(Machete.Web.Resources.WorkOrders.acknowledgement)
    }

    <!-- Display Disclaimer information - worker center specific -->
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Disclaimer_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Disclaimer_ES"])
    }
</div>

<div>
    <!-- Display Submission information - worker center specific -->
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Submission_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["Submission_ES"])
    }
</div>

<!-- POP-UP MODALS -->
<!-- Display Request Workers pop-up - worker center specific -->
<!-- TODO: only enable the worker request feature IF the employer has hired in the past -->
<!-- Display Work Assignment pop-up - worker center specific -->
<div id="workAssignmentDialog-@(Model.ID)" title="@Machete.Web.Resources.WorkOrders.workAssignments" class="display" style="display: none">
    <table>
        <tr>
            <!-- Skill -->
            <td>
                @Html.Label(Machete.Domain.Resources.WorkAssignment.skillID)
            </td>
            <td>
                <!-- TODO: remove paperOrderNum model reference -->
                @Html.DropDownListFor(model => model.paperOrderNum,
                new SelectList(Lookups.getOnlineEmployerSkill(),
                    "Value",
                    "Text",
                    Model.typeOfWorkID),
                             @Machete.Web.Resources.Shared.choose, new { tabindex = "1" })
            </td>
            <td width="10%">
                <p id="validateSkill"></p>
            </td>
            <!-- Skill Description - READ-ONLY -->
            <td>
                @Html.Label(Machete.Web.Resources.WorkAssignments.skillDescription)
            </td>
            <td>
                @Html.TextArea("SkillDescription", "", new { @readonly="readonly" })
            </td>
        </tr>
        <tr>
            <!-- Requested Hours -->
            <td>
                @Html.Label(Machete.Domain.Resources.WorkAssignment.hours)
            </td>
            <td>
                <!-- TODO: remove paperOrderNum model reference -->
                @Html.DropDownListFor(model => model.waPseudoIDCounter,
                new SelectList(Lookups.getTransportationMethodList(),
                    "Value",
                    "Text",
                    Model.typeOfWorkID),
                             @Machete.Web.Resources.Shared.choose, new { tabindex = "2" })
            </td>
            <td width="10%">
                <p id="validateHours"></p>
            </td>
            <!-- Minimum Hours - READ-ONLY -->
            <td>
                @Html.Label(Machete.Web.Resources.WorkAssignments.minHours)
            </td>
            <td>
                @Html.TextBox("MinimumHours", "", new { @readonly="readonly" })
            </td>
        </tr>
        <tr>
            <!-- Additional Description -->
            <td>
                @Html.Label(Machete.Web.Resources.WorkAssignments.additionalDescription)
            </td>
            <td>
                @Html.TextArea("AdditionalDescription")
            </td>
            <td width="20%">
                <p id="validateAdditionalDescription"></p>
            </td>
            <td>
                @Html.Label(Machete.Domain.Resources.WorkAssignment.hourlyWage)
            </td>
            <!-- Hourly Wage - READ-ONLY -->
            <td>
                @Html.TextBox("HourlyWage", "", new { @readonly="readonly" })
            </td>
        </tr>
    </table>
    @Html.Label(Machete.Domain.Resources.WorkAssignment.weightLifted)
    @Html.CheckBox("Weight")
    <br />
    <input type="button" value="@Machete.Web.Resources.WorkOrders.createsubmit" class="formButton" id="addWorkerBtn-@(Model.ID)"/>
    <input type="button" value="@Machete.Web.Resources.WorkOrders.editcancel" class="formButton" id="removeWorkerBtn-@(Model.ID)"/>
</div>

<div id="workerDialog-@(Model.ID)" title="@Machete.Domain.Resources.WorkOrder.requestTitle">
    <table id="workerTable-@(Model.ID)" class="display" style="display: none">
        <thead>
            <tr>
                <th>EDITREF</th>
                <th>LABEL</th>
                <th>ID</th>
                <th>@Worker.dwccardnum</th>
                <th>@Person.firstname1</th>
            </tr>
        </thead>
    </table>
</div>

<!-- Display Business Hours pop-up - worker center specific -->
<div id="businessHoursDialog" title="@Machete.Web.Resources.WorkOrders.businessHoursModal" class="display" style="display: none">
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["BusinessHours_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["BusinessHours_ES"])
    }
</div>
<!-- Display Work Site address pop-up -->
<div id="workSiteAddress1Dialog" title="@Machete.Web.Resources.WorkOrders.workSiteAddress1" class="display" style="display: none">
    <p>@Machete.Web.Resources.WorkOrders.workSiteAddress1Dialog</p>
</div>
<!-- Display Employer address pop-up -->
<div id="employerAddress1Dialog" title="@Machete.Domain.Resources.Employer.address1" class="display" style="display: none">
    <p>@Machete.Web.Resources.Employers.employerAddress1Dialog</p>
</div>
<!-- Display Weight Lift Requirement pop-up - worker center specific -->
<div id="weightLiftedDialog" title="@Machete.Web.Resources.WorkOrders.weightRequirements" class="display" style="display: none">
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["WeightLifted_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["WeightLifted_ES"])
    }
</div>
<!-- Display Transportation Method pop-up - worker center specific -->
<div id="transportationMethodDialog" title="@Machete.Domain.Resources.WorkOrder.transportMethodID" class="display" style="display: none">
    @if (CI.TwoLetterISOLanguageName.ToUpperInvariant() == "EN") {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["TransportationMethod_EN"])
    } else {
        @Html.Raw(System.Web.Configuration.WebConfigurationManager.AppSettings["TransportationMethod_ES"])
    }
</div>
<!-- Display Work Description pop-up -->
<div id="workDescriptionDialog" title="@Machete.Domain.Resources.WorkOrder.description" class="display" style="display: none">
    <p>@Machete.Web.Resources.WorkOrders.workDescription</p>
</div>
<!-- Display Contact Name pop-up -->
<div id="contactNameDialog" title="@Machete.Domain.Resources.WorkOrder.contactName" class="display" style="display: none">
    <p>@Machete.Web.Resources.WorkOrders.contactName</p>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        alert("Testing JQuery");

        $("#transportationFeesHeader").hide();

        // http://trentrichardson.com/examples/timepicker/
        $("#@(idPrefix)dateTimeofWork").datetimepicker({
            stepMinute: 15,
            ampm: false,
            hourMin: 7,
            hourMax: 23,
            minuteMin: 0,
            minuteMax: 45,
            minuteGrid: 15,
            hourGrid: 4
        });

        $('#workerTable-@(Model.ID)').dataTable({
            "bPaginate": true,
            "bLengthChange": true,
            "aaSorting": [[9, 'desc']],
            "bFilter": true,
            "bSort": true,
            "bInfo": true,
            "iDeferLoading": true,
            "bAutoWidth": false,
            "bServerSide": true,
            "sAjaxSource": "/Worker/AjaxHandler", 
            "oLanguage": datatable_lang_@(CI.TwoLetterISOLanguageName),
            "bProcessing": true,
            "aoColumns": [
                { "mDataProp": "tabref","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "tablabel","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "WID","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "dwccardnum" },
                { "mDataProp": "firstname1" }
            ],
            // callback populates html attr with row data from JSON            
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                $(nRow).attr('recordid', aData['WID']);
                //$(nRow).attr('edittablabel', aData[1]);                
                return nRow;
            }         
        }).fnSetFilteringDelay(250);

        // Toggle English required note box
        $('#@(idPrefix)englishRequired').mUI('selectToggleOnValue', {
            target: $('#@(idPrefix)englishRequiredNoteRow'),
            showVal: "@(Shared.yes)"
        });

        // Business name toggle - ON
        $('#@(idPrefix)business').mUI('selectToggleOnValue', {
            target: $('#@(idPrefix)businessNameRow'),
            showVal: "@(Shared.yes)"
        });

        // Employer name toggle - OFF
        $('#@(idPrefix)business').mUI('selectToggleOnValue', {
            target: $('#@(idPrefix)employerNameRow'),
            showVal: "@(Shared.no)"
        });

        // ReferredBy Other toggle
        $('#@(idPrefix)referredby').mUI('selectToggleOnValue', {
            target: $('#@(idPrefix)referredbyOtherRow'),
            showVal: "Other"
        });

        //////////////////////////////////////////////////////////////////////////
        // POP-UP MODALS
        //////////////////////////////////////////////////////////////////////////
        $('#addWABtn-@(Model.ID)').click(function () {
            $('#workAssignmentDialog-@(Model.ID)').dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#workAssignmentDialog-@(Model.ID)').show();
        });

        $('#transportationMethodModal').click(function () {

            $("#transportationMethodDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#transportationMethodDialog').show();
        });

        $('#contactNameModal').click(function () {

            $("#contactNameDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#contactNameDialog').show();
        });

        $('#workDescriptionModal').click(function () {

            $("#workDescriptionDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#workDescriptionDialog').show();
        });

        $('#workSiteAddress1Modal').click(function () {

            $("#workSiteAddress1Dialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#workSiteAddress1Dialog').show();
        });

        $('#weightLiftedModal').click(function () {

            $("#weightLiftedDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#weightLiftedDialog').show();
        });

        $('#businessHoursModal').click(function () {

            $("#businessHoursDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#businessHoursDialog').show();
        });

        $('#businessHoursModal2').click(function () {

            $("#businessHoursDialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#businessHoursDialog').show();
        });

        $('#employerAddress1Modal').click(function () {
            $("#employerAddress1Dialog").dialog({
                height: 340,
                width: 1000,
                modal: true
            });

            $('#employerAddress1Dialog').show();
        });

        //////////////////////////////////////////////////////////////////////////
        // HELPER FUNCTIONS
        //////////////////////////////////////////////////////////////////////////
        function checkDate() {

            var userInput = $("#@(idPrefix)dateTimeofWork").val();
            var userInputInMs = new Date(userInput);

            /*
            http://stackoverflow.com/questions/5619202/converting-string-to-date-in-js
            Date.parse almost gets you what you want. It chokes on the am/pm part, but with some hacking you can get it to work:

            var str = 'Sun Apr 25, 2010 3:30pm',
                timestamp;

            timestamp = Date.parse(str.replace(/[ap]m$/i, ''));

            if(str.match(/pm$/i) >= 0) {
                timestamp += 12 * 60 * 60 * 1000;
            }
            */

            if (isNaN(userInputInMs.valueOf())) {
                $("#invalidDate").text("The date must be in a valid date form (e.g. 03/14/2015 14:00)").show();
                return;
            } else {
                $("#invalidDate").hide();
            }

            var dayOfWeek = userInputInMs.getDay();
            console.log("The day of week is: " + dayOfWeek);
            var hourOfDay = userInputInMs.getHours();
            console.log("The hour of day is: " + hourOfDay);

            // Set up Day of Week Conversion
            var weekday = new Array(7);
            weekday[0]=  "Sunday";
            weekday[1] = "Monday";
            weekday[2] = "Tuesday";
            weekday[3] = "Wednesday";
            weekday[4] = "Thursday";
            weekday[5] = "Friday";
            weekday[6] = "Saturday";

            var advanceHours;
            var earliestHour;
            var latestHour;

            if (dayOfWeek == 0) { // Sunday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursSunday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursSunday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursSunday"]);
            } else if (dayOfWeek == 1) { // Monday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursMonday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursMonday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursMonday"]);
            } else if (dayOfWeek == 2) { // Tuesday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursTuesday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursTuesday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursTuesday"]);
            } else if (dayOfWeek == 3) { // Wednesday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursWednesday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursWednesday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursWednesday"]);
            } else if (dayOfWeek == 4) { // Thursday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursThursday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursThursday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursThursday"]);
            } else if (dayOfWeek == 5) { // Friday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursFriday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursFriday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursFriday"]);
            } else if (dayOfWeek == 6) { // Saturday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursSaturday"]);
                earliestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineEarliestHoursSaturday"]);
                latestHour = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineLatestHoursSaturday"]);
            }

            if (isNaN(advanceHours)) { // In case valid value not set in configuration file, set default
                advanceHours = 36;
            }

            var future = Date.now() + (advanceHours * 60 * 60 * 1000);
             
            // Confirm that enough advance hours have been provided
            if(userInputInMs >= future) {
                $("#futureTime").hide();
            } else {
                $("#futureTime").text("Date must be at least " + advanceHours + " hours from now to place an order on " + weekday[dayOfWeek]).show();
            }

            // Confirm that earliest time of day is valid
            if (hourOfDay < earliestHour) {
                $("#earliestTime").text("Time must start after " + earliestHour + " O'Clock on " + weekday[dayOfWeek]).show();
            } else {
                $("#earliestTime").hide();
            }

            // Confirm that earliest time of day is valid
            if (hourOfDay > latestHour) {
                $("#latestTime").text("Time must start after " + latestHour + " O'Clock on " + weekday[dayOfWeek]).show();
            } else {
                $("#latestTime").hide();
            }
        };

        function validateZipcodes() {
            // Check that required fields are set
            if (($("#@(idPrefix)transportMethodID").val() == "") || ($("#@(idPrefix)zipcode"))) {
                console.log("empty string");
                return;
            }

            var allowableZipcode = true;
            var transportMethod = $("#@(idPrefix)transportMethodID").val();

            // TODO: Ensure that all lookup tables have the same values here
            if (transportMethod == 26) { // Worker buses = 26
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusInsideZone"];
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusOutsideZone"];

                if (insideZipCodes == "" || outsideZipCodes == "") {
                    $("#invalidZipcode").hide();
                    return;
                }

                if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes within zone
                    allowableZipcode = true;
                } else if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes outside zone
                    allowableZipcode = true;
                } else {
                    allowableZipcode = false;
                }

            } else if (transportMethod == 29) { // Van service = 29
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanInsideZone"];
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanOutsideZone"];

                if (insideZipCodes == "" || outsideZipCodes == "") {
                    $("#invalidZipcode").hide();
                    return;
                }

                if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes within zone
                    allowableZipcode = true;
                } else if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes outside zone
                    allowableZipcode = true;
                } else {
                    allowableZipcode = false;
                }
            }

            if (!allowableZipcode) {
                $("#invalidZipcode").text("This zipcode is not a valid zipcode that we provide service to").show();
            } else {
                $("#invalidZipcode").hide();
            }
        }

        function calculateTransportationFees() {

            // Check that required fields are set
            // TODO: Check that a worker has been assigned to the WO
            if (($("#@(idPrefix)transportMethodID").val() == "") || ($("#@(idPrefix)zipcode"))) {
                return;
            }

            var transportFee;
            var transportMethod = $("#@(idPrefix)transportMethodID").val();
            var isTransportFeeSet = false;

            // TODO: retrieve num workers assigned to work order
            var numWorkers = 1;

            // TODO: Ensure that all lookup tables have the same values here
            if (transportMethod == 26) { // Worker buses = 26
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusInsideZone"];
                if (insideZipCodes != "") {
                    if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                        // Zipcode is in the allowable list of zipcodes within zone
                        transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportBusInsideZoneCost"];
                        if (transportFee != "") {
                            isTransportFeeSet = true;
                        }
                    } 
                }
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusOutsideZone"];
                if (outsideZipCodes != "") {
                    if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                        // Zipcode is in the allowable list of zipcodes outside zone
                        transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportBusOutsideZoneCost"];
                        if (transportFee != "") {
                            isTransportFeeSet = true;
                        }
                    }
                }

            } else if (transportMethod == 29) { // Van service = 29
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanInsideZone"];
                if (insideZipCodes != "") {
                    if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                        // Zipcode is in the allowable list of zipcodes within zone
                        if (numWorkers = 1) {
                            transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportVanInsideZoneCostOneWorker"];
                            if (transportFee != "") {
                                isTransportFeeSet = true;
                            }
                        } else if (numWorkers > 1) {
                            transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportVanInsideZoneCostMultipleWorkers"];
                            if (transportFee != "") {
                                isTransportFeeSet = true;
                            }
                        }
                    }
                } 
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportVanOutsideZone"];
                if (outsideZipCodes != "") {
                    if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                        // Zipcode is in the allowable list of zipcodes outside zone
                        transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportVanOutsideZoneCost"];
                        if (transportFee != "") {
                            isTransportFeeSet = true;
                        }
                    }
                }
            }

            if (isTransportFeeSet) {
                $("#transportationFeesHeader").show();
                $("#transportationFees").text("$" + transportFee.toFixed(2)).show();
            } else {
                $("#transportationFeesHeader").hide();
            }

        };

        //////////////////////////////////////////////////////////////////////////
        // VALIDATION
        //////////////////////////////////////////////////////////////////////////
        function enableButton() {
            // TODO: Check that a worker has been assigned to the WO
            if( ($("#futureTime").is(":visible") == true) || ($("#latestTime").is(":visible") == true) || ($("#earliestTime").is(":visible") == true)  || 
                ($("#invalidDate").is(":visible") == true) || ($("#invalidZipcode").is(":visible") == true)){
                // Disable button
                $("#@(idPrefix)SaveBtn").hide();
            } else {
                // Enable button
                $("#@(idPrefix)SaveBtn").show();
            }
        };

        $("#@(idPrefix)dateTimeofWork").focusin(function() {
            // Confirm date is valid
            checkDate();

            // Confirm transportation method is valid with date
            checkTransportationMethodDate();

            // Enable Submit button if valid
            enableButton();
        });

        $("#@(idPrefix)employerPhone").focusout(function() {
        	
            if($("#@(idPrefix)phone").val() == "") {
                $("#@(idPrefix)phone").val($("#@(idPrefix)employerPhone").val());
            }

            // Enable Submit button if valid
            enableButton();
        });
        
        //////////////////////////////////////////////////////////////////////////
        // WORKER REQUESTS
        //////////////////////////////////////////////////////////////////////////
        // workRequest Dialog -doubleclick on row to select
        // create event to handle worker selection from dialog
        $('#workerTable-@(Model.ID)').find('tbody').dblclick(function (event) {            
            var myTr = event.target.parentNode;
            var myID = $(myTr).attr('recordid');  
            var myLabel =  $(myTr).find('td:eq(0)').text() + ' '+
                                              $(myTr).find('td:eq(2)').text() + ' '+
                                              $(myTr).find('td:eq(4)').text();
            // handler function created by addRequestionBtn create event
            //M_workerRequestHandler_@(Model.ID)(myID, myLabel);
            $('#workerRequests2_WO-@(Model.ID)').append(
                  $('<option></option>').val(myID).html(myLabel)                
              );
            $('a.ui-dialog-titlebar-close').click();
        });

        $('#workerDialog-@(Model.ID)').hide();
        $('#workerTable-@(Model.ID)').hide();

        $('#addRequestBtn-@(Model.ID)').click(function () {
            $('#workerTable-@(Model.ID)').dataTable().fnDraw();
            $('#workerTable-@(Model.ID)').show();
            //
            //Anon function to handle doubleclick of record selector
            //M_workerRequestHandler_@(Model.ID) = function (myID, myLabel){
            //    $('#workerRequests2_WO-@(Model.ID)').append(
            //        $('<option></option>').val(myID).html(myLabel)                
            //    );
            //}
            $("#workerDialog-@(Model.ID)").dialog({
                height: 340,
                width: 1000,
                modal: true
            });
            
            $('#workerDialog-@(Model.ID)').show();
        });

        $('#removeRequestBtn-@(Model.ID)').click(function () {
            $('#workerRequests2_WO-@(Model.ID)').find('option:selected').remove();
        });

        //////////////////////////////////////////////////////////////////////////
        // WORK ASSIGNMENTS
        //////////////////////////////////////////////////////////////////////////
        $('#removeWorkerBtn-@(Model.ID)').click(function () {
            $('a.ui-dialog-titlebar-close').click();
        });

        var workAssignments = {list: []};

        $('#addWorkerBtn-@(Model.ID)').click(function () {
            var option = $('<option></option>').val(1).html("HERE"); 
            $('#workAssignments_WO-@(Model.ID)').append(option);

            var wa = {};
            wa.skillId = $('#paperOrderNum').val();
            wa.hours = $('#waPseudoIDCounter').val();
            wa.desc = $('#AdditionalDescription').val();
            wa.weight = $('#Weight').val();
            wa.skillDesc = $('#SkillDescription').val();
            wa.minHours = $('#MinimumHours').val();
            wa.hourlyWage = $('#HourlyWage').val();

            //var stringifiedWa = JSON.stringify(wa);
            workAssignments['list'].push(wa);

            console.log(JSON.stringify(workAssignments));
            //$('#workerAssignments').val(JSON.stringify(workAssignments));
            
            $('#workerAssignments').val(JSON.stringify(workAssignments));
            $('a.ui-dialog-titlebar-close').click();
        });

    });
</script>