@model Machete.Domain.WorkOrder
@using Machete.Web.Helpers
@using Machete.Web.Resources
@using Machete.Domain.Resources
@{
    System.Globalization.CultureInfo CI = (System.Globalization.CultureInfo)Session["Culture"];
    string recType = "WO";
    string idPrefix = recType + Model.ID + "-";
}
@Html.HiddenFor(model => model.ID, new { @class = "hiddenRecID" })
@Html.HiddenFor(model => model.EmployerID, new { @id = idPrefix + "EmployerID" })

<!-- MAIN WORK ORDER FORM -->
<div>
<h1>Worker Online Order Form</h1>
<p>If you are ready to hire a worker, please follow the instructions below and fill out the following form.</p>
<p>If you still have questions about hiring a worker, please call us at 206-956-0779 x3 or contact us <a href="http://casa-latina.org/contact-us">here</a>.</p>
<h2>Please note:</h2>
<ol>
<li>This order is <u>not complete until a Casa Latina representative contacts</u> you to verify your order. If you do not hear from us or you need the worker within 48 hours, please call 206-956-0779 x3 during our office hours.</li>
<li>Please <u>allow a one hour window for the worker(s) to arrive</u>. This will account for routes with multiple stops and for traffic.</li>
<li>There is no transportation fee to hire a Casa Latina worker when you <u>pick them up from our office</u>. However, for a small fee we will send a worker to your door.</li>
</ol>
<p>Workers can be dropped off at your home or worksite for a small fee with our van service. This allows for a more accurate arrival time and is most convenient for our workers. Rates according to distance from Casa Latina:</p>
<ul>
<li>Within the City of Seattle: $15 for 1 worker; $20 for 2+ workers</li>
<li>Outside the City of Seattle: $25 for 1+ workers</li>
</ul>
<p>Workers can also arrive at your home or worksite via <strong>public transportation</strong>. Workers arriving by public transportation will have a more flexible arrival time. **This fee supports logistical assistance for the workers. These rates apply:</p>
<ul>
<li>Within Seattle city limits: $5</li>
<li>Outside Seattle city limits: $10 Note: this service allows for workers to arrive to a Park and Ride or Transit Center near your home or worksite. You are responsible for providing the workers with transportation from the Park and Ride or Transit center to your home or worksite. We can only guarantee delivery of workers in Seattle, Mercer Island, or Bellevue in the 98006 area code. If you live outside these areas, we will get back to you to make transportation arrangements.</li>
</ul>
<p>See the bottom of this page for labor prices.</p>
</div>
<input type="button" class="formButton" value="@WorkOrders.createsubmit" />
<div class="tb-table">
    <span id=@(idPrefix)hirerWorkOrderValidationErrors></span>
    <h3>Work Request</h3>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.dateTimeofWork, new { tabindex = "1", id = idPrefix + "dateTimeofWork" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.workSiteAddress1, new { tabindex = "2", id = idPrefix + "workSiteAddress1" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.workSiteAddress2, new { tabindex = "3", id = idPrefix + "workSiteAddress2" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.city, new { tabindex = "4", id = idPrefix + "city" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.state, new { tabindex = "5", id = idPrefix + "state" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.zipcode, new { tabindex = "6", id = idPrefix + "zipcode" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.transportMethodID)
        @Html.mUIDropDownListFor(model => model.transportMethodID,
                        new SelectList(Lookups.getSelectList(Machete.Domain.LCategory.transportmethod), "Value", "Text", Model.transportMethodID),
                        new { tabindex = "7", id = idPrefix + "transportMethodID" })
    </div>
<!--
        @Html.mUITableLabelFor(model => model.transportTransactType)
        @Html.mUIDropDownListFor(model => model.transportTransactType,
                        new SelectList(Lookups.getSelectList(Machete.Domain.LCategory.transportTransactType), "Value", "Text", Model.transportTransactType),
                        new { tabindex = "8", id = idPrefix + "transportTransactType" })
-->
     <div class="tb-row desc-field">
        @Html.mUITableDescLabelFor(model => model.description)
        <div class="tb-field">
            @Html.ValidationMessageFor(model => model.description)
            @Html.TextAreaFor(model => model.description, new { tabindex = "9", @class = "desc-field", id = idPrefix + "description" })
        </div>
    </div>
</div><!--tb-table main workorder table-->
<div class="tb-table">
    <h3>Profile</h3>
    <div class="tb-row">
        <div class="tb-label business_@(Model.ID)">
            @Html.mUITableLabelFor(model => model.Employer.business)
        </div>
        <div class="tb-field business_@(Model.ID)">
            @Html.mUIDropDownYesNoFor(model => model.Employer.business, new { tabindex = "10", id = idPrefix + "business" }) 
        </div>
    </div>
    <!-- Note: Field only appears in table when englishRequired = FALSE -->
    <div class="tb-row employerNameRow" id="@(idPrefix)employerNameRow">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.name, new { tabindex = "11", id = idPrefix + "employerName" })
    </div>
    <!-- Note: Field only appears in table when englishRequired = TRUE -->
    <div class="tb-row businessNameRow" id="@(idPrefix)businessNameRow">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.businessname, new { tabindex = "12", id = idPrefix + "businessname" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.address1, new { tabindex = "13", id = idPrefix + "employerAddress1" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.address2, new { tabindex = "14", id = idPrefix + "employerAddress2" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.city, new { tabindex = "15", id = idPrefix + "employerCity" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.state, new { tabindex = "16", id = idPrefix + "employerState" })
        @Html.ValidationMessageFor(model => model.Employer.state)

    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.zipcode, new { tabindex = "17", id = idPrefix + "employerZipcode" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.Employer.phone)
        @Html.mUITableTextBoxFor(model => model.Employer.phone, new { tabindex = "18", id = idPrefix + "employerPhone" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.cellphone, new { tabindex = "19", id = idPrefix + "employerCellphone" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.email, new { tabindex = "20", id = idPrefix + "email" })
    </div>
    <div class="tb-row">
        <div class="tb-label referredby_@(Model.ID)">
            @Html.mUITableLabelFor(model => model.Employer.referredby)
        </div>
        <div class="tb-field referredby_@(Model.ID)">
            @Html.mUIDropDownListFor(model => model.Employer.referredby,
                        new SelectList(Lookups.getSelectList(Machete.Domain.LCategory.emplrreference), "Value", "Text", Model.Employer.referredby),
                        new { tabindex = "21", id = idPrefix + "referredby" })
        </div>
    </div>
    <!-- Note: Field only appears in table when referredBy = "Other" -->
    <!-- TODO: Need to make sure that grabbing the english text to do the string comparison  -->
    <div class="tb-row referredbyOtherRow" id="@(idPrefix)referredbyOtherRow">
        @Html.mUITableLabelAndTextBoxFor(model => model.Employer.referredbyOther, new { tabindex = "22", id = idPrefix + "referredbyOther" })
    </div>
    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.Employer.returnCustomer)
        @Html.mUIDropDownYesNoFor(model => model.Employer.returnCustomer, new { tabindex = "23", id = idPrefix + "returnCustomer" }) 
    </div>
    <div class="tb-row">
        @Html.mUITableLabelFor(model => model.Employer.receiveUpdates)
        @Html.mUIDropDownYesNoFor(model => model.Employer.receiveUpdates, new { tabindex = "24", id = idPrefix + "receiveUpdates" }) 
    </div>
</div><!--tb-table main workorder table-->
<div class="tb-table">
    <h3>Work Details</h3>
    
    <div class="tb-row">
        @Html.mUITableLabelAndTextBoxFor(model => model.contactName, new { tabindex = "25", id = idPrefix + "contactName" })
    </div>
    <div class="tb-row">
        @Html.Label(Machete.Domain.Resources.WorkOrder.phoneWorkSite)
        @Html.mUITableTextBoxFor(model => model.phone, new { tabindex = "26", id = idPrefix + "phone" })
    </div>
    <div class="tb-row">
        <div class="tb-label englishRequired_@(Model.ID)">
            @Html.LabelFor(model => model.englishRequired)
        </div>
        <div class="tb-field englishRequired_@(Model.ID)">
            @Html.mUIDropDownYesNoFor(model => model.englishRequired, new { tabindex = "29", id = idPrefix + "englishRequired" })
        </div>
    </div>
    <!-- Note: Field only appears in table when englishRequired = TRUE -->
    <div class="tb-row englishNoteRow" id="@(idPrefix)englishRequiredNoteRow">
        @Html.mUITableDescLabelFor(model => model.englishRequiredNote)
        <div class="tb-field">
            @Html.TextAreaFor(model => model.englishRequiredNote, new { tabindex = "30", @class = "desc-field", id = idPrefix + "englishRequiredNote" })
            @Html.ValidationMessageFor(model => model.englishRequiredNote)
        </div>
    </div>
    <div class="tb-row">
        <div class="tb-label desc-label">
            @Html.LabelFor(model => model.workerRequests)
            <br />
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestAdd" class="formButton" id="addRequestBtn-@(Model.ID)"/>
            <input type="button" value="@Machete.Domain.Resources.WorkOrder.requestRemove" class="formButton" id="removeRequestBtn-@(Model.ID)"/>
        </div>
        <div class="tb-field desc-field">
            @Html.ListBox("workerRequests2", new SelectList(ViewBag.workerRequests, "Value", "Text"), new { id = "workerRequests2_WO-"+ Model.ID, tabindex = "32", style="min-width: 16em;"})
        </div>
    </div>
<input type="button" class="formButton" value="@WorkOrders.createsubmit" />
</div><!--tb-table main workorder table-->

<div id="workerDialog-@(Model.ID)" title="@Machete.Domain.Resources.WorkOrder.requestTitle">
    <table id="workerTable-@(Model.ID)" class="display" style="display: none">
        <thead>
            <tr>
                <th>EDITREF</th>
                <th>LABEL</th>
                <th>ID</th>
                <th>@Worker.dwccardnum</th>
                <th>@Person.firstname1</th>
            </tr>
        </thead>
    </table>
</div>
    
<div>
    <p><strong style="line-height: 1.538em;">Worker performance disclaimer</strong></p>
    <p>Casa Latina does not employ the workers whom we refer; when you make the decision to hire them, you are their employer and they are your employees. Thus, while we do our best to only refer workers who are skilled and dependable, we cannot and do not guarantee that worker performance will always meet your expectations. Casa Latina is not responsible for any failure in worker performance or for any damage or injuries that could conceivably occur during the performance of the work you have hired these workers to perform.</p>
    <h2>Skill Pricing</h2>
    <table border="1" cellpadding="0" cellspacing="0" style="width: 100%;">
        <thead>
        <tr>
            <th scope="col">Skilled Labor</th>
            <th scope="col">Starting At***</th>
            <th scope="col">Additional Hours At</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>Carpentry (Framing and cabinetry)</td>
            <td>$100</td>
            <td>$20-hr</td>
        </tr>
        <tr>
            <td>Sheetrock (Hanging, taping, mudding, and sanding)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Flooring(Laminate, vinyl, wood)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Brick masonry and Tile installation</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Roofing (installation only)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Painting-spray (Preparation, cutting, and taping)</td>
            <td>$100</td>
            <td>$20-hr</td>
        </tr>
        <tr>
            <td>Painting-brush (Preparation, cutting, taping, and clean-up)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Skilled Gardening (includes pruning, trimming, transplanting, and basic yard work)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Yard work (only: yard cleaning, mowing, weeding and planting, pressure washing)</td>
            <td>$80</td>
            <td>$16-hr</td>
        </tr>
        <tr>
            <td>Landscaping (patio pavers, retaining walls, and walkways)</td>
            <td>$100</td>
            <td>$20-hr</td>
        </tr>
        <tr>
            <td>Digging (trenches, drains, laying sod, holes)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Moving (furniture, appliances, and boxes)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Hauling (heavy material, lumber, dirt, rocks, bricks, mulch compost, or heavy branches)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Demolition(Chimneys require hard hats)</td>
            <td>$90</td>
            <td>$18-hr</td>
        </tr>
        <tr>
            <td>Party and event staffing</td>
            <td>$80</td>
            <td>$16-hr</td>
        </tr>
        </tbody>
    </table>
    <p><strong>***Includes 5 hours of work</strong></p>
    <table border="1" cellpadding="0" cellspacing="0" style="width: 100%;">
        <thead>
        <tr>
            <th scope="col">House Cleaning</th>
            <th scope="col">Starting At*</th>
            <th scope="col">Additional Hours At</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td width="65%">House cleaning</td>
            <td>$65</td>
            <td>$16-hr</td>
        </tr>
        </tbody>
    </table>
    <p><strong>*Includes 3 hours of work</strong></p>
<!--
    <p id="why-email"><strong>Why does Casa Latina ask for my e-mail address?</strong></p>
    <p>We use your e-mail address to confirm your order and to update you on the status of your order.</p>
-->
</div>
<script type="text/javascript">
    $(document).ready(function () {
        //
        //

        $("#@(idPrefix)dateTimeofWork").focusout(function() {
            var userInput = $("#@(idPrefix)dateTimeofWork").val();
            var userInputInMs = new Date(userInput);
            /*
            http://stackoverflow.com/questions/5619202/converting-string-to-date-in-js
            Date.parse almost gets you what you want. It chokes on the am/pm part, but with some hacking you can get it to work:

            var str = 'Sun Apr 25, 2010 3:30pm',
                timestamp;

            timestamp = Date.parse(str.replace(/[ap]m$/i, ''));

            if(str.match(/pm$/i) >= 0) {
                timestamp += 12 * 60 * 60 * 1000;
            }
            */
            if (isNaN(userInputInMs.valueOf())) {
                // TODO: provide error handling
            }
            var dayOfWeek = userInputInMs.getDay();
            console.log("The day of week is: " + dayOfWeek);
            /*
            var d = new Date();
            var weekday = new Array(7);
            weekday[0]=  "Sunday";
            weekday[1] = "Monday";
            weekday[2] = "Tuesday";
            weekday[3] = "Wednesday";
            weekday[4] = "Thursday";
            weekday[5] = "Friday";
            weekday[6] = "Saturday";

            var n = weekday[d.getDay()];
            */
            var advanceHours;
            if (dayOfWeek == 0) { // Sunday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursSunday"]);
            } else if (dayOfWeek == 1) { // Monday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursMonday"]);
            } else if (dayOfWeek == 2) { // Tuesday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursTuesday"]);
            } else if (dayOfWeek == 3) { // Wednesday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursWednesday"]);
            } else if (dayOfWeek == 4) { // Thursday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursThursday"]);
            } else if (dayOfWeek == 5) { // Friday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursFriday"]);
            } else if (dayOfWeek == 6) { // Saturday
                advanceHours = parseInt(@System.Web.Configuration.WebConfigurationManager.AppSettings["OnlineAdvanceHoursSaturday"]);
            }
            if (isNaN(advanceHours)) { // In case valid value not set in configuration file, set default
                advanceHours = 36;
            }

            var future = Date.now() + (advanceHours * 60 * 60 * 1000);
             
            if(userInputInMs >= future) {
                // TODO: need to remove error & enable button when the date / time are valid
                console.log('date is good >=48 hours');
            } else {
                // TODO: rethink this - maybe create a list of errors at the top & hide /show them instead of managing list
                $("#@(idPrefix)hirerWorkOrderValidationErrors").append("<p>Date must be at least " + advanceHours + " hours from now</p>");
                // TODO: need to disenable button when the date / time are invalid

                //var newSpan = $('<span for="#WO6-dateTimeofWork" generated="true" class>Date must be at least 48 hours from now</span>')
                //$("#@(idPrefix)dateTimeofWork").next().text('Date must be at least 48 hours from now');
                //$("span[data-valmsg-for='dateTimeofWork']").text('Date must be at least 48 hours from now');
            }
        });
        
        $("#@(idPrefix)zipcode").focusout(function() {

            var transportFee;
            var allowableZipcode = false;
            var transportMethod = $("#@(idPrefix)transportMethodID").val();
            console.log(transportMethod);

            // TODO: Ensure that all lookup tables have the same values here
            if (transportMethod == 26) { // Worker buses = 26
                var insideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusInsideZone"];
                var outsideZipCodes = @System.Web.Configuration.WebConfigurationManager.AppSettings["ServiceableZipcodesTransportBusOutsideZone"];
                if (insideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes within zone
                    allowableZipcode = true;
                    transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportBusInsideZoneCost"];
                } else if (outsideZipCodes.indexOf(parseInt($("#@(idPrefix)zipcode"))) != -1) {
                    // Zipcode is in the allowable list of zipcodes outside zone
                    allowableZipcode = true;
                    transportFee = @System.Web.Configuration.WebConfigurationManager.AppSettings["TransportBusOutsideZoneCost"];
                }
                if (!allowableZipcode) {
                    $("#@(idPrefix)hirerWorkOrderValidationErrors").append("<p>This zipcode is not a valid zipcode that we provide service to</p>");
                }
                //@System.String.Format("{0:C}", transportFee)
                //$("#@(idPrefix)hirerWorkOrderValidationErrors").append("<p>The transportation costs are " + transportFee + " and must be paid via PayPal to complete order</p>");
            }
        });

        // http://trentrichardson.com/examples/timepicker/
        $("#@(idPrefix)dateTimeofWork").datetimepicker({
            stepMinute: 15,
            ampm: true,
            hourMin: 7,
            hourMax: 23,
            minuteMin: 0,
            minuteMax: 45,
            minuteGrid: 15,
            hourGrid: 4
        });

        $('#workerTable-@(Model.ID)').dataTable({
            "bPaginate": true,
            "bLengthChange": true,
            "aaSorting": [[9, 'desc']],
            "bFilter": true,
            "bSort": true,
            "bInfo": true,
            "iDeferLoading": true,
            "bAutoWidth": false,
            "bServerSide": true,
            "sAjaxSource": "/Worker/AjaxHandler", 
            "oLanguage": datatable_lang_@(CI.TwoLetterISOLanguageName),
            "bProcessing": true,
            "aoColumns": [
                { "mDataProp": "tabref","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "tablabel","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "WID","bSearchable": false, "bSortable": false, "bVisible": false },
                { "mDataProp": "dwccardnum" },
                { "mDataProp": "firstname1" }
            ],
            // callback populates html attr with row data from JSON            
            "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                $(nRow).attr('recordid', aData['WID']);
                //$(nRow).attr('edittablabel', aData[1]);                
                return nRow;
            }         
        }).fnSetFilteringDelay(250);

        // workRequest Dialog -doubleclick on row to select
        // create event to handle worker selection from dialog
        $('#workerTable-@(Model.ID)').find('tbody').dblclick(function (event) {            
            var myTr = event.target.parentNode;
            var myID = $(myTr).attr('recordid');  
            var myLabel =  $(myTr).find('td:eq(0)').text() + ' '+
                                              $(myTr).find('td:eq(2)').text() + ' '+
                                              $(myTr).find('td:eq(4)').text();
          // handler function created by addRequestionBtn create event
          //M_workerRequestHandler_@(Model.ID)(myID, myLabel);
              $('#workerRequests2_WO-@(Model.ID)').append(
                    $('<option></option>').val(myID).html(myLabel)                
                );
          $('a.ui-dialog-titlebar-close').click();
        });
        //////////////////////////////////////////////////
        //
        //
        $('#workerDialog-@(Model.ID)').hide();
        $('#workerTable-@(Model.ID)').hide();
        //$("#wophone").mask("999-999-9999", { placeholder: " " });

        //////////////////////////////////////////////////
        //
        //
        $('#addRequestBtn-@(Model.ID)').click(function () {
            $('#workerTable-@(Model.ID)').dataTable().fnDraw();
            $('#workerTable-@(Model.ID)').show();
            //
            //Anon function to handle doubleclick of record selector
            //M_workerRequestHandler_@(Model.ID) = function (myID, myLabel){
            //    $('#workerRequests2_WO-@(Model.ID)').append(
            //        $('<option></option>').val(myID).html(myLabel)                
            //    );
            //}
            $("#workerDialog-@(Model.ID)").dialog({
                    height: 340,
                    width: 1000,
                    modal: true
            });
            
            $('#workerDialog-@(Model.ID)').show();
        });
        //////////////////////////////////////////////////
        //
        //
        $('#removeRequestBtn-@(Model.ID)').click(function () {
            $('#workerRequests2_WO-@(Model.ID)').find('option:selected').remove();
        });
    });
</script>